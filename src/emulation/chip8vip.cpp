#include <emulation/chip8vip.hpp>
#include <emulation/logger.hpp>
#include <emulation/hardware/cdp186x.hpp>
#include <chiplet/utility.hpp>

#include <fmt/format.h>
#include <nlohmann/json.hpp>
#include <ghc/random.hpp>

#include <algorithm>
#include <atomic>
#include <fstream>

#define VIDEO_FIRST_VISIBLE_LINE 80
#define VIDEO_FIRST_INVISIBLE_LINE  208

namespace emu {

static const std::string PROP_CPU = "CPU";
static const std::string PROP_CLOCK = "Clock Rate";
static const std::string PROP_RAM = "Memory";
static const std::string PROP_CLEAN_RAM = "Clean RAM";
static const std::string PROP_VIDEO = "Video";
static const std::string PROP_AUDIO = "Audio";
static const std::string PROP_KEYBOARD = "Keyboard";
static const std::string PROP_ROM_NAME = "ROM Name";
static const std::string PROP_INTERPRETER = "Interpreter";

static const RealCoreSetupInfo defaultSetups[] = {
    {"CHIP8", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "CDP1861", "audio": "CA555 Buzzer", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8")"},
    {"CHIP10", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "CDP1861", "audio": "CA555 Buzzer", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP10")"},
    {"CHIP8RB", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "CDP1861", "audio": "CA555 Buzzer", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8RB")"},
    {"CHIP8TPD", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "CDP1861", "audio": "CA555 Buzzer", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8TPD")"},
    {"CHIP8FPD", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "CDP1861", "audio": "CA555 Buzzer", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8FPD")"},
    {"CHIP8X", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "VP-590", "audio": "VP-595 Simple SB", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8X")"},
    {"CHIP8XTPD", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "VP-590", "audio": "VP-595 Simple SB", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8XTPD")"},
    {"CHIP8XFPD", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "VP-590", "audio": "VP-595 Simple SB", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8FPD")"},
    {"CHIP8E", R"("cpu": "CDP1802", "clockRate": 1760640, "ram": "4096", "cleanRam": true, "video": "CDP1861", "audio": "CA555 Buzzer", "keyboard": "VIP Hex", "romName": "COSMAC-VIP", "interpreter": "CHIP8E")"}
};

class Chip8VIP::Private {
public:
    uint16_t FETCH_LOOP_ENTRY{0x01B};
    static constexpr uint64_t CPU_CLOCK_FREQUENCY = 1760640;
    explicit Private(Chip8EmulatorHost& host, Cdp1802Bus& bus, Chip8EmulatorOptions& options)
        : _host(host)
        , _cpu(bus, CPU_CLOCK_FREQUENCY)
        , _video(options.behaviorBase == Chip8EmulatorOptions::eCHIP8XVIP || options.behaviorBase == Chip8EmulatorOptions::eCHIP8XVIP_TPD || options.behaviorBase == Chip8EmulatorOptions::eCHIP8XVIP_FPD ? Cdp186x::eVP590 : Cdp186x::eCDP1861, _cpu, options)
        , _properties(options.properties)
    {
        using namespace std::string_literals;
        if(!_properties || options.properties.propertyClass() != _properties.propertyClass()) {
            auto& prop = Properties::getProperties("CosmacVIP");
            if(!prop) {
                prop.registerProperty({PROP_CPU, "CDP1802"s});
                prop.registerProperty({PROP_CLOCK, Property::Integer{(int)CPU_CLOCK_FREQUENCY, 100000, 500000000}, false});
                prop.registerProperty({PROP_RAM, Property::Combo{"2048"s, "4096"s, "8192"s, "12288"s, "16384"s, "32768"s}, false});
                prop[PROP_RAM].setSelectedText(std::to_string(_memorySize));
                prop.registerProperty({PROP_CLEAN_RAM, true, false});
                prop.registerProperty({PROP_VIDEO, Property::Combo{"CDP1861", "CDP1861-C10-HIRES", "VP-590", "CDP1864"}});
                prop.registerProperty({PROP_AUDIO, Property::Combo{"CA555 Buzzer", "VP-595 Simple SB", "VP-551 2x Super SB"}});
                prop.registerProperty({PROP_KEYBOARD, Property::Combo{"VIP Hex", "VP-580 2x Hex", "VP-601 VIP ASCII", "VP-611 VIP A+NP"}});
                prop.registerProperty({PROP_ROM_NAME, "COSMAC-VIP"s});
                prop.registerProperty({PROP_INTERPRETER, Property::Combo{"NONE", "CHIP8", "CHIP10", "CHIP8RB", "CHIP8TPD", "CHIP8FPD", "CHIP8X", "CHIP8XTPD", "CHIP8XFPD", "CHIP8E"}});
            }
            _properties = prop;
        }
        if(_video.getType() == Cdp186x::eVP590 && options.behaviorBase != Chip8EmulatorOptions::eCHIP8XVIP) {
            _colorRamMask = 0x3ff;
            _colorRamMaskLores = 0x3e7;
        }
        if(options.behaviorBase == Chip8EmulatorOptions::eCHIP8EVIP)
            FETCH_LOOP_ENTRY = 0x1f;
        _properties[PROP_ROM_NAME].setAdditionalInfo(fmt::format("(sha1: {})", calculateSha1(_rom_cvip, 512).to_hex().substr(0,8)));
        _properties[PROP_INTERPRETER].setSelectedText("CHIP8");
        _properties[PROP_INTERPRETER].setAdditionalInfo(fmt::format("(sha1: {})", calculateSha1(_chip8_cvip, 512).to_hex().substr(0,8)));
        switch(_video.getType()) {
            case Cdp186x::eCDP1861_C10:
                _properties[PROP_VIDEO].setSelectedIndex(1);
                break;
            case Cdp186x::eVP590:
                _properties[PROP_VIDEO].setSelectedIndex(2);
                _properties[PROP_AUDIO].setSelectedIndex(1);
                break;
            case Cdp186x::eCDP1864:
                _properties[PROP_VIDEO].setSelectedIndex(3);
                break;
            case Cdp186x::eCDP1861:
            default:
                _properties[PROP_VIDEO].setSelectedIndex(0);
                _properties[PROP_AUDIO].setSelectedIndex(0);
                break;
        }
        _memorySize = std::stoul(_properties[PROP_RAM].getSelectedText());
        _ram.resize(_memorySize, 0);
    }
    Chip8EmulatorHost& _host;
    uint32_t _memorySize{4096};
    Cdp1802 _cpu;
    Cdp186x _video;
    int64_t _irqStart{0};
    int64_t _nextFrame{0};
    uint8_t _keyLatch{0};
    uint8_t _frequencyLatch{0};
    uint16_t _lastOpcode{0};
    uint16_t _currentOpcode{0};
    uint16_t _initialChip8SP{0};
    uint16_t _colorRamMask{0xff};
    uint16_t _colorRamMaskLores{0xe7};
    bool _mapRam{false};
    float _wavePhase{0};
    std::vector<uint8_t> _ram{};
    std::array<uint8_t,1024> _colorRam{};
    std::array<uint8_t,512> _rom{};
    VideoType _screen;
    Properties& _properties;
};


struct Patch {
    uint16_t offset;
    std::vector<uint8_t> bytes;
};

struct PatchSet {
    uint16_t apply(uint8_t* destination, size_t destSize) const
    {
        uint16_t maxOffset = 0;
        for(const auto& [offset, bytes] : patches) {
            auto* dst = destination + offset;
            if(offset + bytes.size() > maxOffset)
                maxOffset = offset + bytes.size();
            for(const auto& data : bytes) {
                *dst++ = data;
            }
        }
        return maxOffset;
    }
    std::vector<Patch> patches;
};

const uint8_t _chip8_cvip[0x200] = {
    0x91, 0xbb, 0xff, 0x01, 0xb2, 0xb6, 0xf8, 0xcf, 0xa2, 0xf8, 0x81, 0xb1, 0xf8, 0x46, 0xa1, 0x90, 0xb4, 0xf8, 0x1b, 0xa4, 0xf8, 0x01, 0xb5, 0xf8, 0xfc, 0xa5, 0xd4, 0x96, 0xb7, 0xe2, 0x94, 0xbc, 0x45, 0xaf, 0xf6, 0xf6, 0xf6, 0xf6, 0x32, 0x44,
    0xf9, 0x50, 0xac, 0x8f, 0xfa, 0x0f, 0xf9, 0xf0, 0xa6, 0x05, 0xf6, 0xf6, 0xf6, 0xf6, 0xf9, 0xf0, 0xa7, 0x4c, 0xb3, 0x8c, 0xfc, 0x0f, 0xac, 0x0c, 0xa3, 0xd3, 0x30, 0x1b, 0x8f, 0xfa, 0x0f, 0xb3, 0x45, 0x30, 0x40, 0x22, 0x69, 0x12, 0xd4, 0x00,
    0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x7c, 0x75, 0x83, 0x8b, 0x95, 0xb4, 0xb7, 0xbc, 0x91, 0xeb, 0xa4, 0xd9, 0x70, 0x99, 0x05, 0x06, 0xfa, 0x07, 0xbe, 0x06, 0xfa, 0x3f, 0xf6,
    0xf6, 0xf6, 0x22, 0x52, 0x07, 0xfa, 0x1f, 0xfe, 0xfe, 0xfe, 0xf1, 0xac, 0x9b, 0xbc, 0x45, 0xfa, 0x0f, 0xad, 0xa7, 0xf8, 0xd0, 0xa6, 0x93, 0xaf, 0x87, 0x32, 0xf3, 0x27, 0x4a, 0xbd, 0x9e, 0xae, 0x8e, 0x32, 0xa4, 0x9d, 0xf6, 0xbd, 0x8f, 0x76,
    0xaf, 0x2e, 0x30, 0x98, 0x9d, 0x56, 0x16, 0x8f, 0x56, 0x16, 0x30, 0x8e, 0x00, 0xec, 0xf8, 0xd0, 0xa6, 0x93, 0xa7, 0x8d, 0x32, 0xd9, 0x06, 0xf2, 0x2d, 0x32, 0xbe, 0xf8, 0x01, 0xa7, 0x46, 0xf3, 0x5c, 0x02, 0xfb, 0x07, 0x32, 0xd2, 0x1c, 0x06,
    0xf2, 0x32, 0xce, 0xf8, 0x01, 0xa7, 0x06, 0xf3, 0x5c, 0x2c, 0x16, 0x8c, 0xfc, 0x08, 0xac, 0x3b, 0xb3, 0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4, 0x9b, 0xbf, 0xf8, 0xff, 0xaf, 0x93, 0x5f, 0x8f, 0x32, 0xdf, 0x2f, 0x30, 0xe5, 0x00, 0x42, 0xb5,
    0x42, 0xa5, 0xd4, 0x8d, 0xa7, 0x87, 0x32, 0xac, 0x2a, 0x27, 0x30, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xa3, 0x98, 0x56, 0xd4, 0xf8, 0x81, 0xbc, 0xf8, 0x95, 0xac, 0x22, 0xdc, 0x12, 0x56, 0xd4, 0x06, 0xb8, 0xd4,
    0x06, 0xa8, 0xd4, 0x64, 0x0a, 0x01, 0xe6, 0x8a, 0xf4, 0xaa, 0x3b, 0x28, 0x9a, 0xfc, 0x01, 0xba, 0xd4, 0xf8, 0x81, 0xba, 0x06, 0xfa, 0x0f, 0xaa, 0x0a, 0xaa, 0xd4, 0xe6, 0x06, 0xbf, 0x93, 0xbe, 0xf8, 0x1b, 0xae, 0x2a, 0x1a, 0xf8, 0x00, 0x5a,
    0x0e, 0xf5, 0x3b, 0x4b, 0x56, 0x0a, 0xfc, 0x01, 0x5a, 0x30, 0x40, 0x4e, 0xf6, 0x3b, 0x3c, 0x9f, 0x56, 0x2a, 0x2a, 0xd4, 0x00, 0x22, 0x86, 0x52, 0xf8, 0xf0, 0xa7, 0x07, 0x5a, 0x87, 0xf3, 0x17, 0x1a, 0x3a, 0x5b, 0x12, 0xd4, 0x22, 0x86, 0x52,
    0xf8, 0xf0, 0xa7, 0x0a, 0x57, 0x87, 0xf3, 0x17, 0x1a, 0x3a, 0x6b, 0x12, 0xd4, 0x15, 0x85, 0x22, 0x73, 0x95, 0x52, 0x25, 0x45, 0xa5, 0x86, 0xfa, 0x0f, 0xb5, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x82, 0x15, 0x15, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x88,
    0xd4, 0x45, 0x07, 0x30, 0x8c, 0x45, 0x07, 0x30, 0x84, 0xe6, 0x62, 0x26, 0x45, 0xa3, 0x36, 0x88, 0xd4, 0x3e, 0x88, 0xd4, 0xf8, 0xf0, 0xa7, 0xe7, 0x45, 0xf4, 0xa5, 0x86, 0xfa, 0x0f, 0x3b, 0xb2, 0xfc, 0x01, 0xb5, 0xd4, 0x45, 0x56, 0xd4, 0x45,
    0xe6, 0xf4, 0x56, 0xd4, 0x45, 0xfa, 0x0f, 0x3a, 0xc4, 0x07, 0x56, 0xd4, 0xaf, 0x22, 0xf8, 0xd3, 0x73, 0x8f, 0xf9, 0xf0, 0x52, 0xe6, 0x07, 0xd2, 0x56, 0xf8, 0xff, 0xa6, 0xf8, 0x00, 0x7e, 0x56, 0xd4, 0x19, 0x89, 0xae, 0x93, 0xbe, 0x99, 0xee,
    0xf4, 0x56, 0x76, 0xe6, 0xf4, 0xb9, 0x56, 0x45, 0xf2, 0x56, 0xd4, 0x45, 0xaa, 0x86, 0xfa, 0x0f, 0xba, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x4b
};


static std::map<std::string,PatchSet> g_patchSets = {
    {
        "CHIP8I",
        {{
            {0x1A4, {0x86, 0xFA, 0x01, 0x3A, 0xAC, 0xE5, 0x63, 0xD4, 0xE7, 0x45, 0xFA, 0x01, 0x3A, 0xF2, 0x63, 0xD4}},
            {0x1F2, {0x3F, 0xF2, 0x6B, 0x3F, 0xF5, 0xD4}}
        }}
    },
    {
        "CHIP10", // 4k version, Ben H. Hutchinson, Jr.
        {{
            {0x000, {0x91, 0xFF, 0x03, 0xBB, 0xFF, 0x01, 0xB2, 0xB6, 0xF8, 0xCF, 0xA2, 0xF8, 0x73, 0xA1, 0x90, 0xB1}},
            {0x05D, {0x0B}},
            {0x06D, {0x00}},
            {0x070, {0x00, 0x42, 0x70, 0xC4, 0x22, 0x78, 0x22, 0x52, 0x19, 0xF8, 0x00, 0xA0, 0x9B, 0xB0, 0x98, 0x32, 0x85, 0xAB, 0x2B, 0x8B, 0xB8, 0x88, 0x32, 0x8C, 0x7B, 0x28, 0x30, 0x8D, 0x7A, 0x34, 0x71, 0x30, 0x8D}},
            {0x091, {0x42, 0x70, 0xC4, 0x22, 0x78, 0x22, 0x52, 0xF8, 0x00, 0xA0, 0x9B, 0xB0, 0xE2, 0xE2, 0x30, 0x91}},
            {0x0DE, {0x12, 0xD4, 0x9B, 0xBF, 0xFC, 0x04, 0x22, 0x52, 0x93, 0xAF, 0x93, 0x5F, 0x1F, 0x30, 0xF3, 0x00}},
            {0x0F3, {0x9F, 0xF3, 0x32, 0xDE, 0x30, 0xE8}},
            {0xB00, {0x06, 0xFA, 0x07, 0xBE, 0x06, 0xFA, 0x7F, 0xF6, 0xF6, 0xF6, 0x22, 0x52, 0x07, 0xFA, 0x3F, 0xFE}},
            {0xB10, {0xFE, 0xFE, 0xAC, 0x94, 0x7E, 0xBC, 0x8C, 0xFE, 0xF1, 0xAC, 0x9C, 0x7E, 0x52, 0x9B, 0xF4, 0xBC}},
            {0xB20, {0x45, 0xFA, 0x0F, 0xAD, 0xA7, 0xF8, 0xD0, 0xA6, 0x94, 0xAF, 0x87, 0x32, 0x85, 0x27, 0x4A, 0xBD}},
            {0xB30, {0x9E, 0xAE, 0x8E, 0x32, 0x3E, 0x9D, 0xF6, 0xBD, 0x8F, 0x76, 0xAF, 0x2E, 0x30, 0x32, 0x9D, 0x56}},
            {0xB40, {0x16, 0x8F, 0x56, 0x16, 0x30, 0x28, 0x00, 0xEC, 0xF8, 0xD0, 0xA6, 0x94, 0xA7, 0x8D, 0x32, 0x7E}},
            {0xB50, {0x06, 0xF2, 0x2D, 0x32, 0x58, 0xF8, 0x01, 0xA7, 0x46, 0xF3, 0x5C, 0x02, 0xFB, 0x0F, 0x32, 0x6C}},
            {0xB60, {0x1C, 0x06, 0xF2, 0x32, 0x68, 0xF8, 0x01, 0xA7, 0x06, 0xF3, 0x5C, 0x2C, 0x16, 0x8C, 0xFC, 0x10}},
            {0xB70, {0xAC, 0x9C, 0x7C, 0x00, 0xBC, 0xE2, 0x52, 0x9B, 0xFC, 0x04, 0xF3, 0xEC, 0x3A, 0x4D, 0xF8, 0xFF}},
            {0xB80, {0xA6, 0x87, 0x56, 0x12, 0xD4, 0x8D, 0xA7, 0x87, 0x32, 0x46, 0x2A, 0x27, 0x30, 0x87}}
        }}
    },
    {
        "CHIP8RB", // Relative Branching in CHIP-8, Wayne Smith
        {{
            {0x1A4, {0xE5, 0x86, 0xFC, 0x04, 0x85, 0x33, 0xFF, 0xF7, 0xA5, 0x33, 0xFA, 0x95, 0xFF, 0x01, 0x30}},
            {0x1F2, {0xF4, 0xA5, 0x3B, 0xFA, 0x95, 0xFC, 0x01, 0xB5, 0x25, 0xD4}}
        }}
    },
    {
        "CHIP8TPD",
        {{
            {0x003, {0x02}},
            {0x00a, {0x02}},
            {0x00d, {0x06}},
            {0x018, {0xfa}},
            {0x07e, {0x3f}},
            {0x084, {0x30, 0xe0}},
            {0x0d7, {0x30, 0xe6}},
            {0x0e0, {0x9b, 0x7c, 0x00, 0xbc, 0x30, 0x86, 0x9c, 0x7c, 0x00, 0xbc, 0xfb, 0x10, 0x30, 0xfc}},
            {0x0fc, {0x3a, 0xb3, 0x30, 0xd9}},
            {0x1fa, {0x02, 0x45, 0x02, 0x30}},
            {0x200, {0x12, 0x60, 0x01, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8}},
            {0x20e, {0xa0, 0x9b, 0xfa, 0x0e, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0x20, 0xa0, 0xe2, 0x3c, 0x15, 0x80, 0xe2, 0x20, 0xa0, 0x34, 0x1c,
                     0x98, 0x32, 0x29, 0xab, 0x2b, 0x8b, 0xb8, 0x88, 0x32, 0x03, 0x7b, 0x28, 0x30, 0x04, 0xf8, 0x02, 0xae, 0x9b, 0xbf, 0xf8}},
            {0x237, {0xaf, 0xf8}},
            {0x23a, {0x5f, 0x1f, 0x8f, 0x3a, 0x38, 0x2e, 0x8e, 0x3a, 0x38, 0xd4, 0x01, 0x9b, 0xff, 0x01, 0xbb, 0xd4}}
        }}
    },
    {
        "CHIP8FPD",
        {{
            {0x003, {0x04}},
            {0x00a, {0x02}},
            {0x00d, {0x25}},
            {0x018, {0xfa}},
            {0x04e, {0xc0, 0x02, 0x00}},
            {0x07e, {0x7f, 0xe2}},
            {0x082, {0x30, 0xe0, 0x74, 0xbc}},
            {0x0b5, {0xfc}},
            {0x0c5, {0xd1}},
            {0x0d0, {0x73, 0x16, 0x8c, 0xfc, 0x08, 0xac, 0x9c, 0x7c, 0x00, 0xbc, 0xfb, 0x10, 0x3a, 0xb3, 0x30, 0xfc}},
            {0x0e0, {0xac, 0x93, 0x7e, 0xbc, 0x8c, 0xfe, 0xf1, 0xac, 0x9c, 0x7e, 0x52, 0x9b, 0x30, 0x84}},
            {0x0fc, {0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4}},
            {0x1fa, {0x02, 0x3f, 0x00, 0x4b, 0x12, 0x44}},
            {0x200, {0x9b, 0xfc, 0x03, 0xbf, 0xf8, 0xff, 0xaf, 0xf8, 0x04, 0xae, 0xef, 0x94, 0x73, 0x8f, 0x3a, 0x0b}},
            {0x210, {0x2e, 0x8e, 0x3a, 0x0b, 0x5f, 0xd4, 0xf8, 0xf0, 0xa6, 0xf8, 0x02, 0xbf, 0xf8, 0x08, 0xaf, 0x06,
                     0x5f, 0xd4, 0x7a, 0x72, 0x70, 0xc4, 0x22, 0x78, 0x22, 0x52, 0x19, 0xe2, 0x9b, 0xb0, 0xf8, 0x00,
                     0xa0, 0x98, 0x32, 0x38, 0xab, 0x2b, 0x8b, 0xb8, 0x88, 0x32, 0x22, 0x7b, 0x28, 0x30, 0x23, 0x9b,
                     0xff, 0x03, 0xbb, 0xd4}}
        }}
    },
    {
        "CHIP8X",
        {{
            {0x015, {0x02}},
            {0x018, {0xfa}},
            {0x055, {0x00}},
            {0x05b, {0x02}},
            {0x065, {0xfe}},
            {0x06b, {0x00}},
            {0x0fe, {0x05, 0xf6, 0x33, 0xa4, 0x30, 0x95}},
            {0x1a4, {0xe6, 0x06, 0xfa, 0x77, 0x56, 0x07, 0xfa, 0x77, 0xf4, 0xfa, 0x77, 0x56, 0x15, 0xd4, 0x00, 0x00}},
            {0x1f2, {0x37, 0x88, 0xd4, 0x3f, 0x88, 0xd4, 0xe6, 0x63, 0xd4, 0xe6, 0x3f, 0xfc, 0x6b, 0xd4, 0x92, 0xbd, 0xf8, 0x9f, 0xad, 0x0d, 0x32, 0x0a, 0x45, 0xd4}},
            {0x20b, {0x45, 0xfa, 0x0f, 0xaf, 0x32, 0x31, 0x46, 0xfa, 0x3f, 0xf6, 0xf6, 0xf6, 0x22, 0x52, 0xe2, 0x06, 0xfa, 0x1f, 0xfe, 0xfe, 0xfe, 0xf1, 0xac, 0x12, 0xf8, 0xd0, 0xbc, 0x07, 0x5c, 0x8c, 0xfc, 0x08, 0xac, 0x2f, 0x8f, 0x3a, 0x26, 0xd4, 0x07,
                     0xbd, 0x46, 0xac, 0x06, 0xbc, 0x8c, 0xfa, 0x07, 0x22, 0x52, 0xe2, 0xf8, 0xc0, 0xbe, 0x9c, 0xf6, 0xf6, 0xf6, 0xf6, 0xfa, 0x07, 0xad, 0x9c, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xf4, 0xae, 0x8c, 0xf6, 0xf6, 0xf6, 0xf6, 0xfa, 0x07, 0xaf, 0x9e,
                     0xb7, 0x8e, 0xa7, 0x8d, 0xbc, 0xf8, 0x04, 0xac, 0x9d, 0x57, 0x87, 0xfc, 0x08, 0xa7, 0x2c, 0x8c, 0x3a, 0x61, 0x9c, 0x32, 0x73, 0xff, 0x01, 0xbc, 0x30, 0x5e, 0x1e, 0x8e, 0xfa, 0xe7, 0xae, 0x8f, 0x32, 0x7e, 0x2f, 0x30, 0x58, 0x12, 0xd4,
                     0x92, 0xbd, 0xf8, 0x9f, 0xad, 0xf8, 0xc0, 0xbc, 0x94, 0xac, 0xf8, 0xaa, 0x5c, 0x94, 0xbc, 0xac, 0x0c, 0xfb, 0x91, 0x32, 0x9c, 0xf8, 0x91, 0x5c, 0xf8, 0x01, 0x5d, 0xd4, 0xf8}},
            {0x29e, {0x5d, 0xd4, 0xe2, 0x65, 0x22, 0xd4}},
            {0x2fa, {0x02, 0x80}},
            {0x2fd, {0xe0}},
            {0x2ff, {0x4b}}
        }}
    },
    {
        "CHIP8XTPD",
        {{
            {0x003, {0x02}},
            {0x00a, {0x02}},
            {0x00d, {0x06}},
            {0x015, {0x02}},
            {0x018, {0xf8}},
            {0x055, {0x00}},
            {0x05b, {0x02}},
            {0x065, {0xFE}},
            {0x06b, {0x50}},
            {0x07e, {0x3f}},
            {0x084, {0x30, 0xe0}},
            {0x092, {0xF5}},
            {0x0d7, {0x30, 0xe6}},
            {0x0e1, {0x7c, 0x00, 0xbc, 0x30, 0x86, 0x9c, 0x7c, 0x00, 0xbc, 0xfb, 0x10}},
            {0x0ec, {0x3a, 0xb3, 0x30, 0xd9, 0x42, 0xb5, 0x42, 0xa5, 0xd4, 0x8d, 0xa7, 0x87, 0x32, 0xac, 0x2a, 0x27, 0x30, 0xf7, 0x05, 0xf6}},
            {0x100, {0x33, 0xa4, 0x30, 0x95}},
            {0x1a4, {0xe6, 0x06, 0xfa, 0xff, 0x56, 0x07, 0xfa, 0xff, 0xf4, 0xfa, 0xff, 0xd4, 0x15, 0xd4, 0x00, 0x00}},
            {0x1f2, {0x37, 0x88, 0xd4, 0x3f, 0x88, 0xd4, 0xe6, 0x63, 0xd4, 0xe6, 0x3f, 0xfc, 0x6b, 0xd4}},
            {0x200, {0x12, 0x60, 0x01, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8}},
            {0x20e, {0xa0, 0x9b, 0xfa, 0x0e, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0x20, 0xa0, 0xe2, 0x3c, 0x15, 0x80, 0xe2, 0x20, 0xa0, 0x34, 0x1c,
                     0x98, 0x32, 0x29, 0xab, 0x2b, 0x8b, 0xb8, 0x88, 0x32, 0x03, 0x7b, 0x28, 0x30, 0x04, 0xf8, 0x02, 0xae, 0x9b, 0xbf, 0xf8}},
            {0x237, {0xaf, 0xf8}},
            {0x23a, {0x5f, 0x1f, 0x8f, 0x3a, 0x38, 0x2e, 0x8e, 0x3a, 0x38, 0xd4, 0x01, 0x9b, 0xff, 0x01, 0xbb, 0xd4}},
            {0x250, {0x92, 0xbd, 0xf8, 0x9f, 0xad, 0x0d, 0x32, 0x5a, 0x45, 0xd4, 0x00, 0x45, 0xfa, 0x0f, 0xaf, 0x32}},
            {0x260, {0x8e, 0x46, 0xfa, 0x3f, 0xf6, 0xf6, 0xf6, 0x22, 0x52, 0xe2, 0x06, 0xfa, 0x3f, 0xfe, 0xfe, 0xfe}},
            {0x270, {0xf1, 0xac, 0x12, 0xf8, 0xd2, 0xbc, 0x3b, 0x84, 0x9c, 0xff, 0xd2, 0x32, 0x81, 0xf8, 0xd2, 0x30}},
            {0x280, {0x83, 0xf8, 0xd3, 0xbc, 0x07, 0x5c, 0x8c, 0xfc, 0x08, 0xac, 0x2f, 0x8f, 0x3a, 0x76, 0xd4}},
            {0x290, {0x92, 0xbd, 0xf8, 0x9f, 0xad, 0xf8, 0xc0, 0xbc, 0x94, 0xac, 0xf8, 0xaa, 0x5c, 0x94, 0xbc, 0xac}},
            {0x2a0, {0x0c, 0xfb, 0x91, 0x32, 0xac, 0xf8, 0x91, 0x5c, 0xf8, 0x01, 0x5d, 0xd4, 0xf8, 0x00, 0x5d, 0xd4}},
            {0x2f0, {0xe2, 0x65, 0x22, 0xd4}},
            {0x2f8, {0x02, 0x45, 0x02, 0x90, 0x02, 0x30, 0x00, 0x4b}}
        }}
    },
    {
        "CHIP8XFPD",
        {{
            {0x003, {0x04}},
            {0x00a, {0x02}},
            {0x00d, {0x25}},
            {0x015, {0x02}},
            {0x018, {0xfa}},
            {0x04e, {0xc0, 0x02, 0x00}},
            {0x055, {0x02}},
            {0x05b, {0x02}},
            {0x065, {0x44}},
            {0x06b, {0x50}},
            {0x07e, {0x7f, 0xe2}},
            {0x082, {0x30, 0xe0, 0x74, 0xbc}},
            {0x0b5, {0xfc}},
            {0x0c5, {0xd1}},
            {0x0d0, {0x73, 0x16, 0x8c, 0xfc, 0x08, 0xac, 0x9c, 0x7c, 0x00, 0xbc, 0xfb, 0x10, 0x3a, 0xb3, 0x30, 0xfc}},
            {0x0e0, {0xac, 0x93, 0x7e, 0xbc, 0x8c, 0xfe, 0xf1, 0xac, 0x9c, 0x7e, 0x52, 0x9b, 0x30, 0x84}},
            {0x0fc, {0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4}},
            {0x1a4, {0xe6, 0x06, 0xfa, 0xff, 0x56, 0x07, 0xfa, 0xff, 0xf4, 0xfa, 0xff, 0xd4, 0x15, 0xd4, 0x00, 0x00}},
            {0x1f2, {0x37, 0x88, 0xd4, 0x3f, 0x88, 0xd4, 0xe6, 0x63, 0xd4, 0xe6, 0x3f, 0xfc, 0x6b, 0xd4}},
            {0x200, {0x9b, 0xfc, 0x03, 0xbf, 0xf8, 0xff, 0xaf, 0xf8, 0x04, 0xae, 0xef, 0x94, 0x73, 0x8f, 0x3a, 0x0b}},
            {0x210, {0x2e, 0x8e, 0x3a, 0x0b, 0x5f, 0xd4, 0xf8, 0xf0, 0xa6, 0xf8, 0x02, 0xbf, 0xf8, 0x08, 0xaf, 0x06,
                     0x5f, 0xd4, 0x7a, 0x72, 0x70, 0xc4, 0x22, 0x78, 0x22, 0x52, 0x19, 0xe2, 0x9b, 0xb0, 0xf8, 0x00,
                     0xa0, 0x98, 0x32, 0x38, 0xab, 0x2b, 0x8b, 0xb8, 0x88, 0x32, 0x22, 0x7b, 0x28, 0x30, 0x23, 0x9b}},
            {0x240, {0xff, 0x03, 0xbb, 0xd4, 0x05, 0xf6, 0xc3, 0x01, 0xa4, 0xc0, 0x01, 0x95}},
            {0x250, {0x92, 0xbd, 0xf8, 0x9f, 0xad, 0x0d, 0x32, 0x5a, 0x45, 0xd4, 0x00, 0x45, 0xfa, 0x0f, 0xaf, 0x32}},
            {0x260, {0x98, 0x46, 0xfa, 0x3f, 0xf6, 0xf6, 0xf6, 0x22, 0x52, 0xe2, 0x06, 0xfa, 0x3f, 0xfe, 0xfe, 0x33}},
            {0x270, {0x7f, 0xf8, 0xd0, 0x30, 0x77, 0xf8, 0xd2, 0xbc, 0x06, 0xfa, 0x7f, 0xfe, 0xfe, 0xfe, 0xf1, 0xac}},
            {0x280, {0x12, 0x3b, 0x8e, 0x9c, 0xfc, 0x01, 0xbc, 0xff, 0xd4, 0x3a, 0x8e, 0xf8, 0xd0, 0xbc, 0x07, 0x5c}},
            {0x290, {0x8c, 0xfc, 0x08, 0xac, 0x2f, 0x8f, 0x3a, 0x81, 0xd4}},
            {0x2a0, {0x92, 0xbd, 0xf8, 0x9f, 0xad, 0xf8, 0xc0, 0xbc, 0x94, 0xac, 0xf8, 0xaa, 0x5c, 0x94, 0xbc, 0xac}},
            {0x2b0, {0x0c, 0xfb, 0x91, 0x32, 0xbc, 0xf8, 0x91, 0x5c, 0xf8, 0x01, 0x5d, 0xd4, 0xf8, 0x00, 0x5d, 0xd4}},
            {0x2f0, {0xe2, 0x65, 0x22, 0xd4}},
            {0x2fa, {0x02, 0xa0, 0x02, 0x3f, 0x00, 0x4b}}
        }}
    },
    {
        "CHIP8E",
        {{
            {0x000, {0xc4, 0x91, 0xbb, 0xff, 0x01, 0xb2, 0xb6, 0xf8, 0xcf, 0xa2, 0xf8, 0x00, 0xa5, 0xf8, 0x02, 0xb5,
                     0xf8, 0x81, 0xb1, 0xf8, 0x46, 0xa1, 0x90, 0xb4, 0xf8, 0x1d, 0xa4, 0x30, 0xe0}},
            {0x01e, {0x69, 0x96, 0xb7, 0xe2, 0x94, 0xbc, 0x05}},
            {0x026, {0xf6, 0xf6, 0xf6, 0x32, 0x42, 0xfe, 0xfc, 0x45, 0xac, 0x45, 0xf9, 0xf0, 0xa6, 0x05}},
            {0x036, {0xf6, 0xf6, 0xf9, 0xf0, 0xa7, 0x4c, 0xb3, 0x0c, 0xa3, 0xd3, 0x30, 0x1f, 0x45, 0xb3, 0x45, 0x30,
                     0x3e, 0x00, 0xfa, 0x00, 0xf3, 0x01, 0x83, 0x01, 0x8b, 0x01, 0x75, 0x00, 0xd7, 0x00, 0xda}},
            {0x056, {0xae}},
            {0x058, {0x91}},
            {0x05a, {0xca}},
            {0x05c, {0xea, 0x01, 0xd1, 0x00, 0x65, 0x01, 0x9f, 0x01, 0x01, 0x06, 0xfa, 0x07, 0xbe, 0x06, 0xfa, 0x3f,
                     0xf6, 0xf6, 0xf6, 0x22, 0x52, 0x07, 0xfe, 0xfe, 0xfe, 0xf1, 0xac, 0x9b, 0xbc, 0x9a, 0xbf, 0x8a,
                     0xaf, 0x45, 0xfa, 0x0f, 0xad, 0xa7, 0xf8, 0xd0, 0xa6, 0x93, 0xb7, 0x87, 0x32, 0xa3, 0x27, 0x4f,
                     0xbd, 0x9e, 0xae, 0x8e, 0x32, 0x9b, 0x9d, 0xf6, 0xbd, 0x97, 0x76, 0xb7, 0x2e, 0x30, 0x8f}},
            {0x09c, {0x56, 0x16, 0x97, 0x56, 0x16, 0x30, 0x85, 0x00, 0xec, 0xf8, 0xd0, 0xa6, 0x93, 0xa7, 0x8d, 0x32,
                     0xd0, 0x2d, 0x06, 0xf2, 0x32, 0xb5, 0xf8, 0x01, 0xa7, 0x46, 0xf3, 0x5c, 0x02, 0xfb, 0x07, 0x32,
                     0xc9, 0x1c, 0x06, 0xf2, 0x32, 0xc5, 0xf8, 0x01, 0xa7, 0x06, 0xf3, 0x5c, 0x2c, 0x16, 0x8c, 0xfc,
                     0x08, 0xac, 0x3b, 0xaa, 0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4, 0x45, 0x56, 0xd4, 0x45, 0xe6,
                     0xf4}},
            {0x0de, {0xd4, 0x00}},
            {0x0e5, {0x94}},
            {0x0e9, {0xf2}},
            {0x0ed, {0x23}},
            {0x0f3, {0x15, 0x85, 0x22, 0x73, 0x95, 0x52, 0x25, 0x45, 0xa5, 0x86, 0xfa, 0x0f, 0xb5, 0xd4, 0x45, 0xa3,
                     0xe6, 0x63, 0x26, 0xd4}},
            {0x11b, {0xe6, 0x15, 0x30, 0xee, 0xe6, 0x8a, 0xf4, 0xaa, 0x9a, 0x7c, 0x00, 0xba, 0xd4, 0x00}},
            {0x133, {0x1a, 0x1a, 0xea, 0xf8, 0xff, 0xae, 0xaf, 0x06, 0xff, 0x64, 0x1f, 0x33, 0x3b, 0xfc, 0x64, 0xff,
                     0x0a, 0x1e, 0x33, 0x42, 0xfc, 0x0a, 0x73, 0x8e, 0x73, 0x8f, 0x5a, 0xd4, 0x06, 0xb8, 0x98, 0x3a,
                     0x51, 0xd4}},
            {0x175, {0x45, 0x76, 0x76, 0x33}},
            {0x17a, {0x7e, 0x07, 0x3b, 0x84, 0xe6, 0xf7, 0x3b, 0x88}},
            {0x195, {0x7e, 0x22, 0x87, 0x52, 0x86, 0xa7, 0x33, 0x6b, 0x30, 0x5b, 0x45, 0xf6, 0xe6, 0x62, 0x26, 0x33,
                     0xa9, 0x36, 0x88, 0xd4, 0x3e, 0x88, 0xd4, 0x00, 0x00, 0x45, 0xfa, 0x0f, 0x3a, 0xb6, 0x07, 0x56,
                     0xd4, 0xaf, 0x22, 0xf8, 0xd3, 0x73, 0x8f, 0xf9, 0xf0, 0x52, 0xe6, 0x07, 0xd2}},
            {0x1c3, {0xf8, 0xff, 0xa6, 0x94, 0x7e, 0x56, 0xd4, 0x45, 0xaa, 0x86, 0xfa, 0x0f, 0xba, 0xd4, 0x19, 0x89,
                     0xae, 0x93, 0xbe, 0x99, 0xee, 0xf4, 0x56, 0x76, 0xe6, 0xf4, 0xb9, 0x56, 0x45, 0xf2}},
            {0x1e2, {0xd4, 0x3f, 0xe3, 0x37, 0xe5, 0xe6, 0x6b, 0xd4, 0xe5, 0x86, 0xfc, 0x01, 0x85, 0x3b, 0xf9, 0xf4,
                     0xa5, 0x95, 0x7c}},
            {0x1f6, {0xb5, 0x25, 0xd4, 0xf7, 0xa5, 0x95, 0x7f, 0x00, 0x30, 0xf6}}
        }}
    },
    {
        "CHIP8ELF",
        {{
            {0x000, {0xf8, 0x0e, 0xb1, 0xf8, 0x46, 0xa1}},
            {0x007, {0x0f, 0xbb}},
            {0x00a, {0x0e, 0xb2, 0xb6, 0xf8, 0xcf, 0xa2, 0xf8, 0x01, 0xb5, 0xf8, 0xfc, 0xa5, 0xf8, 0x00, 0xb4, 0xf8,
                     0x1d, 0xa4, 0xd4, 0x96, 0xb7, 0xe2, 0x94, 0xbc, 0x45, 0xaf}},
            {0x026, {0xf6, 0xf6, 0x32, 0x44, 0xf9, 0x50, 0xac, 0x8f}},
            {0x043, {0x1d}},
            {0x045, {0xb3, 0x45, 0x30, 0x40, 0x22, 0x69, 0x12, 0xd4, 0x00, 0x00}},
            {0x056, {0x00}},
            {0x061, {0x7f, 0x78, 0x86, 0x8e, 0x98, 0xfc, 0x00, 0xc2, 0x94, 0xf1, 0xb2, 0xdf}},
            {0x06e, {0x9c}},
            {0x071, {0xbe, 0xfa, 0x3f, 0xf6, 0xf6, 0xf6, 0x22, 0x52, 0x07, 0xfe, 0xfe, 0xfe, 0xf1, 0xac, 0x9b, 0xbc,
                     0x45, 0xfa, 0x0f, 0xad, 0xa7, 0xf8, 0xd0, 0xa6, 0xf8, 0x00, 0xaf, 0x87, 0x32, 0xf3, 0x27, 0x4a,
                     0xbd, 0x9e, 0xfa, 0x07, 0xae, 0x8e, 0x32, 0xa2, 0x9d, 0xf6, 0xbd, 0x8f, 0x76, 0xaf, 0x2e, 0x30,
                     0x96, 0x9d, 0x56, 0x16, 0x8f, 0x56, 0x16, 0x30, 0x89, 0x00, 0xec, 0xf8, 0xd0, 0xa6, 0xf8, 0x00,
                     0xa7, 0x8d, 0x32, 0xd8, 0x06, 0xf2, 0x2d, 0x32, 0xbd, 0xf8, 0x01, 0xa7, 0x46, 0xf3, 0x5c, 0x02,
                     0xfb, 0x07, 0x32, 0xd1, 0x1c, 0x06, 0xf2, 0x32, 0xcd, 0xf8, 0x01, 0xa7, 0x06, 0xf3, 0x5c, 0x2c,
                     0x16, 0x8c, 0xfc, 0x08, 0xac, 0x3b, 0xb2, 0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4, 0x00}},
            {0x0e5, {0xf8, 0x00, 0x5f, 0x8f, 0x32, 0xde, 0x2f, 0x30, 0xe5}},
            {0x0f7, {0xaa}},
            {0x0fc, {0x45, 0x56, 0xd4}},
            {0x100, {0x45, 0xe6, 0xf4, 0x56, 0xd4}},
            {0x10a, {0x3e, 0x0a, 0x36, 0x0c, 0x22, 0x6c, 0xfa, 0x0f}},
            {0x129, {0x91, 0xba, 0x06, 0xfa, 0x0f, 0xaa, 0x0a, 0xaa, 0xd4, 0x00}},
            {0x175, {0xe6, 0x64, 0xd4, 0x15, 0x85, 0x22, 0x73, 0x95, 0x52, 0x25, 0x45, 0xa5, 0x86, 0xfa, 0x0f, 0xb5,
                     0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x8d, 0x15, 0x15, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x8b, 0xd4, 0x45,
                     0x07, 0x30, 0x8f, 0x45, 0x07, 0x30, 0x87, 0x22, 0x6c, 0x06, 0xf3, 0xfa, 0x0f, 0x52, 0x45, 0xf6,
                     0x42, 0x3b, 0xad, 0x3e, 0x8b, 0x3a, 0x8b, 0xd4, 0x3e, 0xb1, 0x32, 0x8b, 0xd4, 0xf8, 0xf0, 0xa7,
                     0xe7, 0x45, 0xf4, 0xa5, 0x86, 0xfa, 0x0f, 0x3b, 0xc0, 0xfc, 0x01, 0xb5, 0xd4, 0x45, 0xfa, 0x0f,
                     0x3a, 0xca, 0x07, 0x56, 0xd4, 0xaf, 0x22, 0xf8, 0xd3, 0x73, 0x8f, 0xf9, 0xf0, 0x52, 0xe6, 0x07,
                     0xd2, 0x56, 0xf8, 0xff, 0xa6, 0xf8, 0x00, 0x7e, 0x56, 0xd4, 0x19, 0x89, 0xae, 0x93, 0xbe, 0x99,
                     0xee, 0xf4, 0x56, 0x76, 0xe6, 0xf4, 0xb9, 0x56, 0x45, 0xf2, 0x56, 0xd4, 0x45, 0xaa, 0x86, 0xfa,
                     0x0f, 0xba, 0xd4}},
            {0x1ff, {0x49}},
            {0xe00, {0x30, 0x39, 0x22, 0x2a, 0x3e, 0x20, 0x24, 0x34, 0x26, 0x28, 0x2e, 0x18, 0x14, 0x1c, 0x10, 0x12,
                     0xf0, 0x80, 0xf0, 0x80, 0xf0, 0x80, 0x80, 0x80, 0xf0, 0x50, 0x70, 0x50, 0xf0, 0x50, 0x50, 0x50,
                     0xf0, 0x80, 0xf0, 0x10, 0xf0, 0x80, 0xf0, 0x90, 0xf0, 0x90, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x90,
                     0xf0, 0x90, 0x90, 0x90, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x60, 0x20, 0x20, 0x20, 0x70, 0xa0, 0xa0,
                     0xf0, 0x20, 0x20, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8}},
            {0xe4e, {0xa0, 0x9b, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0,
                     0x3c, 0x53, 0x98, 0x32, 0x67, 0xab, 0x2b, 0x8b, 0xb8, 0x88, 0x32, 0x43, 0x7b, 0x28, 0x30, 0x44}}
        }}
    }
};



const uint8_t _rom_cvip[0x200] = {
    0xf8, 0x80, 0xb2, 0xf8, 0x08, 0xa2, 0xe2, 0xd2, 0x64, 0x00, 0x62, 0x0c, 0xf8, 0xff, 0xa1, 0xf8, 0x0f, 0xb1, 0xf8, 0xaa, 0x51, 0x01, 0xfb, 0xaa, 0x32, 0x22, 0x91, 0xff, 0x04, 0x3b, 0x22, 0xb1, 0x30, 0x12, 0x36, 0x28, 0x90, 0xa0, 0xe0, 0xd0,
    0xe1, 0xf8, 0x00, 0x73, 0x81, 0xfb, 0xaf, 0x3a, 0x29, 0xf8, 0xd2, 0x73, 0xf8, 0x9f, 0x51, 0x81, 0xa0, 0x91, 0xb0, 0xf8, 0xcf, 0xa1, 0xd0, 0x73, 0x20, 0x20, 0x40, 0xff, 0x01, 0x20, 0x50, 0xfb, 0x82, 0x3a, 0x3e, 0x92, 0xb3, 0xf8, 0x51, 0xa3,
    0xd3, 0x90, 0xb2, 0xbb, 0xbd, 0xf8, 0x81, 0xb1, 0xb4, 0xb5, 0xb7, 0xba, 0xbc, 0xf8, 0x46, 0xa1, 0xf8, 0xaf, 0xa2, 0xf8, 0xdd, 0xa4, 0xf8, 0xc6, 0xa5, 0xf8, 0xba, 0xa7, 0xf8, 0xa1, 0xac, 0xe2, 0x69, 0xdc, 0xd7, 0xd7, 0xd7, 0xb6, 0xd7, 0xd7,
    0xd7, 0xa6, 0xd4, 0xdc, 0xbe, 0x32, 0xf4, 0xfb, 0x0a, 0x32, 0xef, 0xdc, 0xae, 0x22, 0x61, 0x9e, 0xfb, 0x0b, 0x32, 0xc2, 0x9e, 0xfb, 0x0f, 0x3a, 0x8f, 0xf8, 0x6f, 0xac, 0xf8, 0x40, 0xb9, 0x93, 0xf6, 0xdc, 0x29, 0x99, 0x3a, 0x97, 0xf8, 0x10,
    0xa7, 0xf8, 0x08, 0xa9, 0x46, 0xb7, 0x93, 0xfe, 0xdc, 0x86, 0x3a, 0xad, 0x2e, 0x97, 0xf6, 0xb7, 0xdc, 0x29, 0x89, 0x3a, 0xad, 0x17, 0x87, 0xf6, 0xdc, 0x8e, 0x3a, 0x9e, 0xdc, 0x69, 0x26, 0xd4, 0x30, 0xc0, 0xf8, 0x83, 0xac, 0xf8, 0x0a, 0xb9,
    0xdc, 0x33, 0xc5, 0x29, 0x99, 0x3a, 0xc8, 0xdc, 0x3b, 0xcf, 0xf8, 0x09, 0xa9, 0xa7, 0x97, 0x76, 0xb7, 0x29, 0xdc, 0x89, 0x3a, 0xd6, 0x87, 0xf6, 0x33, 0xe3, 0x7b, 0x97, 0x56, 0x16, 0x86, 0x3a, 0xcf, 0x2e, 0x8e, 0x3a, 0xcf, 0x30, 0xbd, 0xdc,
    0x16, 0xd4, 0x30, 0xef, 0xd7, 0xd7, 0xd7, 0x56, 0xd4, 0x16, 0x30, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39, 0x22, 0x2a, 0x3e, 0x20, 0x24, 0x34, 0x26, 0x28, 0x2e, 0x18, 0x14, 0x1c, 0x10, 0x12, 0xf0, 0x80, 0xf0, 0x80, 0xf0, 0x80, 0x80, 0x80,
    0xf0, 0x50, 0x70, 0x50, 0xf0, 0x50, 0x50, 0x50, 0xf0, 0x80, 0xf0, 0x10, 0xf0, 0x80, 0xf0, 0x90, 0xf0, 0x90, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x90, 0xf0, 0x90, 0x90, 0x90, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x60, 0x20, 0x20, 0x20, 0x70, 0xa0, 0xa0,
    0xf0, 0x20, 0x20, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8, 0x00, 0xa0, 0x9b, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0x3c, 0x53, 0x98, 0x32, 0x67, 0xab, 0x2b, 0x8b, 0xb8, 0x88,
    0x32, 0x43, 0x7b, 0x28, 0x30, 0x44, 0xd3, 0xf8, 0x0a, 0x3b, 0x76, 0xf8, 0x20, 0x17, 0x7b, 0xbf, 0xff, 0x01, 0x3a, 0x78, 0x39, 0x6e, 0x7a, 0x9f, 0x30, 0x78, 0xd3, 0xf8, 0x10, 0x3d, 0x85, 0x3d, 0x8f, 0xff, 0x01, 0x3a, 0x87, 0x17, 0x9c, 0xfe,
    0x35, 0x90, 0x30, 0x82, 0xd3, 0xe2, 0x9c, 0xaf, 0x2f, 0x22, 0x8f, 0x52, 0x62, 0xe2, 0xe2, 0x3e, 0x98, 0xf8, 0x04, 0xa8, 0x88, 0x3a, 0xa4, 0xf8, 0x04, 0xa8, 0x36, 0xa7, 0x88, 0x31, 0xaa, 0x8f, 0xfa, 0x0f, 0x52, 0x30, 0x94, 0x00, 0x00, 0x00,
    0x00, 0xd3, 0xdc, 0xfe, 0xfe, 0xfe, 0xfe, 0xae, 0xdc, 0x8e, 0xf1, 0x30, 0xb9, 0xd4, 0xaa, 0x0a, 0xaa, 0xf8, 0x05, 0xaf, 0x4a, 0x5d, 0x8d, 0xfc, 0x08, 0xad, 0x2f, 0x8f, 0x3a, 0xcc, 0x8d, 0xfc, 0xd9, 0xad, 0x30, 0xc5, 0xd3, 0x22, 0x06, 0x73,
    0x86, 0x73, 0x96, 0x52, 0xf8, 0x06, 0xae, 0xf8, 0xd8, 0xad, 0x02, 0xf6, 0xf6, 0xf6, 0xf6, 0xd5, 0x42, 0xfa, 0x0f, 0xd5, 0x8e, 0xf6, 0xae, 0x32, 0xdc, 0x3b, 0xea, 0x1d, 0x1d, 0x30, 0xea, 0x01
};



Chip8VIP::Chip8VIP(Chip8EmulatorHost& host, Chip8EmulatorOptions& options, IChip8Emulator* other)
    : Chip8RealCoreBase(host, options)
    , _impl(new Private(host, *this, options))
{
    //options.optTraceLog = true;
    if(options.behaviorBase == Chip8EmulatorOptions::eRAWVIP)
        _isHybridChipMode = false;
    std::memcpy(_impl->_rom.data(), _rom_cvip, sizeof(_rom_cvip));
    if(_impl->_ram.size() > 4096) {
        _impl->_rom[0x10] = (_impl->_ram.size() >> 8) - 1;
    }
    _impl->_cpu.setInputHandler([this](uint8_t port) {
        if(port == 1)
            _impl->_video.enableDisplay();
        return 0;
    });
    _impl->_cpu.setOutputHandler([this](uint8_t port, uint8_t val) {
        switch (port) {
        case 1:
            _impl->_video.disableDisplay();
            break;
        case 2:
            _impl->_keyLatch = val & 0xf;
            break;
        case 3:
            _impl->_frequencyLatch = val ? val : 0x80;
            break;
        case 4:
            _impl->_mapRam = true;
            break;
        case 5:
            if(_impl->_video.getType() == Cdp186x::eVP590)
                _impl->_video.incrementBackground();
            break;
        default:
            break;
        }
    });
    _impl->_cpu.setNEFInputHandler([this](uint8_t idx) {
       switch(idx) {
           case 0: { // EF1 is set from four machine cycles before the video line to four before the end
               return _impl->_video.getNEFX();
           }
           case 2: {
               return _impl->_host.isKeyDown(_impl->_keyLatch);
           }
           default:
               return true;
       }
    });
    Chip8VIP::reset();
    if(other && false) {
        std::memcpy(_impl->_ram.data() + 0x200, other->memory() + 0x200, std::min(_impl->_ram.size() - 0x200 - 0x170, (size_t)other->memSize()));
        for(size_t i = 0; i < 16; ++i) {
            _state.v[i] = other->getV(i);
        }
        _state.i = other->getI();
        _state.pc = other->getPC();
        _state.sp = other->getSP();
        _state.dt = other->delayTimer();
        _state.st = other->soundTimer();
        std::memcpy(_state.s.data(), other->getStackElements(), stackSize() * sizeof(uint16_t));
        forceState();
    }
#if 0 //ndef PLATFORM_WEB
    {
        static bool first = true;
        if(first) {
            std::ofstream os("chip8tpd.bin", std::ios::binary);
            os.write((char*)_chip8tdp_cvip, sizeof(_chip8tdp_cvip));
            first = false;
        }
    }
#endif
}

Chip8VIP::~Chip8VIP()
{

}

void Chip8VIP::reset()
{
    if(_options.optTraceLog)
        Logger::log(Logger::eBACKEND_EMU, _impl->_cpu.getCycles(), {_frames, frameCycle()}, fmt::format("--- RESET ---", _impl->_cpu.getCycles(), frameCycle()).c_str());
    if(_impl->_properties[PROP_CLEAN_RAM].getBool()) {
        std::fill(_impl->_ram.begin(), _impl->_ram.end(), 0);
    }
    else {
        ghc::RandomLCG rnd(42);
        std::generate(_impl->_ram.begin(), _impl->_ram.end(), rnd);
    }
    std::memset(_impl->_colorRam.data(), 0, _impl->_colorRam.size());
    if(_isHybridChipMode) {
        std::memcpy(_impl->_ram.data(), _chip8_cvip, sizeof(_chip8_cvip));
        if (_options.advanced.contains("interpreter")) {
            auto name = _options.advanced.value("interpreter", "");
            auto size = patchRAM(name, _impl->_ram.data(), _impl->_ram.size());
            _impl->_properties[PROP_INTERPRETER].setSelectedText(name);
            _impl->_properties[PROP_INTERPRETER].setAdditionalInfo(fmt::format("(sha1: {})", calculateSha1(_impl->_ram.data(), size).to_hex().substr(0, 8)));
            //_impl->_properties[PROP_INTERPRETER_SHA1] = calculateSha1Hex(_impl->_ram.data(), size).substr(0,8);
        }
    }
    else {
        _impl->_properties[PROP_INTERPRETER].setSelectedText("NONE");
        _impl->_properties[PROP_INTERPRETER].setAdditionalInfo("No CHIP-8 interpreter used");
    }
    _impl->_screen.setAll(0);
    _impl->_video.reset();
    _impl->_cpu.reset();
    _cycles = 0;
    _frames = 0;
    _impl->_nextFrame = 0;
    _impl->_lastOpcode = 0;
    _impl->_initialChip8SP = 0;
    _impl->_frequencyLatch = 0x80;
    _impl->_mapRam = false;
    _impl->_wavePhase = 0;
    _cpuState = eNORMAL;
    _errorMessage.clear();
    if (_isHybridChipMode) {
        setExecMode(eRUNNING);
        while (_impl->_cpu.getExecMode() == eRUNNING && (!executeCdp1802() || getPC() != _options.startAddress))
            ;  // fast-forward to fetch/decode loop
    }
    else {
        setExecMode(eRUNNING);
        while (_impl->_cpu.getExecMode() == eRUNNING && !executeCdp1802())
            if(_impl->_cpu.getR(_impl->_cpu.getP()) == 0)
                break;  // fast-forward to fetch/decode loop
    }
    setExecMode(_impl->_host.isHeadless() ? eRUNNING : ePAUSED);
    if(_options.optTraceLog)
        Logger::log(Logger::eBACKEND_EMU, _impl->_cpu.getCycles(), {_frames, frameCycle()}, fmt::format("End of reset: {}/{}", _impl->_cpu.getCycles(), frameCycle()).c_str());
}

uint16_t Chip8VIP::patchRAM(std::string name, uint8_t* ram, size_t size)
{
    auto iter = g_patchSets.find(name);
    if(iter == g_patchSets.end())
        return 0;
    return iter->second.apply(ram, size);
}

std::string Chip8VIP::name() const
{
    return "Chip-8-RVIP";
}

Properties& Chip8VIP::getProperties()
{
    return _impl->_properties;
}

void Chip8VIP::updateProperties(Property& changedProp)
{

}

void Chip8VIP::fetchState()
{
    _state.cycles = _cycles;
    _state.frameCycle = frameCycle();
    if(!_impl->_initialChip8SP)
        _impl->_initialChip8SP = _impl->_cpu.getR(2);
    auto base = _impl->_initialChip8SP & 0xFF00;
    if(base + 0x100 <= _impl->_memorySize)
        std::memcpy(_state.v.data(), &_impl->_ram[base + 0xF0], 16);
    else
        _impl->_cpu.setExecMode(GenericCpu::ePAUSED), _cpuState = eERROR, _errorMessage = "BASE ADDRESS OUT OF RAM";
    _state.i = _impl->_cpu.getR(0xA);
    _state.pc = _impl->_cpu.getR(5);
    _state.sp = ((_impl->_initialChip8SP - _impl->_cpu.getR(2)) >> 1) & 0xffff;
    _state.dt = _impl->_cpu.getR(8) >> 8;
    _state.st = _impl->_cpu.getR(8) & 0xff;
    if(_impl->_initialChip8SP < _impl->_memorySize && _impl->_initialChip8SP > stackSize() * 2) {
        for (int i = 0; i < stackSize() && i < _state.sp; ++i) {
            _state.s[i] = (_impl->_ram[_impl->_initialChip8SP - i * 2 - 2] << 8) | _impl->_ram[_impl->_initialChip8SP - i * 2 - 1];
        }
    }
    else
        _impl->_cpu.setExecMode(GenericCpu::ePAUSED), _cpuState = eERROR, _errorMessage = "BASE ADDRESS OUT OF RAM";
}

void Chip8VIP::forceState()
{
    _state.cycles = _cycles;
    _state.frameCycle = frameCycle();
    if(!_impl->_initialChip8SP)
        _impl->_initialChip8SP = _impl->_cpu.getR(2);
    auto base = _impl->_initialChip8SP & 0xFF00;
    std::memcpy(&_impl->_ram[base + 0xF0], _state.v.data(), 16);
    _impl->_cpu.setR(0xA, (uint16_t)_state.i);
    _impl->_cpu.setR(0x5, (uint16_t)_state.pc);
    _impl->_cpu.setR(0x8, (uint16_t)(_state.dt << 8 | _state.st));
    _impl->_cpu.setR(0x2, (uint16_t)(_impl->_initialChip8SP - _state.sp * 2));
    for(int i = 0; i < stackSize() && i < _state.sp; ++i) {
        _impl->_ram[_impl->_initialChip8SP - i*2 - 2] = _state.s[i] >> 8;
        _impl->_ram[_impl->_initialChip8SP - i*2 - 1] = _state.s[i] & 0xFF;
    }
}

int64_t Chip8VIP::getMachineCycles() const
{
    return _impl->_cpu.getCycles() >> 3;
}

bool Chip8VIP::executeCdp1802()
{
    static int lastFC = 0;
    static int endlessLoops = 0;
    auto [fc,vsync] = _impl->_video.executeStep();
    if(vsync)
        _host.vblank();
    if(_options.optTraceLog  && _impl->_cpu.getCpuState() != Cdp1802::eIDLE)
        Logger::log(Logger::eBACKEND_EMU, _impl->_cpu.getCycles(), {_frames, fc}, fmt::format("{:24} ; {}", _impl->_cpu.disassembleInstructionWithBytes(-1, nullptr), _impl->_cpu.dumpStateLine()).c_str());
    if(_isHybridChipMode && _impl->_cpu.PC() == _impl->FETCH_LOOP_ENTRY) {
        _cycles++;
        //std::cout << fmt::format("{:06d}:{:04x}", _impl->_cpu.getCycles()>>3, opcode()) << std::endl;
        _impl->_currentOpcode = opcode();
        if(_options.optTraceLog)
            Logger::log(Logger::eCHIP8, _cycles, {_frames, fc}, fmt::format("CHIP8: {:30} ; {}", disassembleInstructionWithBytes(-1, nullptr), dumpStateLine()).c_str());
    }
    _impl->_cpu.executeInstruction();
    if(_isHybridChipMode && _impl->_cpu.PC() == _impl->FETCH_LOOP_ENTRY) {
        _impl->_lastOpcode = _impl->_currentOpcode;
#ifdef DIFFERENTIATE_CYCLES
        static int64_t lastCycles{}, lastIdle{}, lastIrq{};
#endif
        fetchState();
#ifdef DIFFERENTIATE_CYCLES
        if((_impl->_lastOpcode & 0xF000) == 0xD000) {
            static int64_t lastDrawCycle{};
            int64_t machineCycles = _impl->_cpu.getCycles() - lastCycles;
            int64_t idleTime = _impl->_cpu.getIdleCycles() - lastIdle;
            int64_t irqTime = _impl->_cpu.getIrqCycles() - lastIrq;
            int64_t nonCode = idleTime + irqTime;
            int64_t betweenDraws = (_impl->_cpu.getCycles() - lastDrawCycle) >> 3;
            int fetchTime = (_impl->_lastOpcode&0xF000)?68:40;
            std::cout << fmt::format("{:04x},{},{},{},{},{},{},{},{},{},{}", _impl->_lastOpcode, _state.v[(_impl->_lastOpcode&0xF00)>>8], _state.v[(_impl->_lastOpcode&0xF0)>>4], _impl->_lastOpcode&0xF,
                                     fetchTime, ((machineCycles - nonCode)>>3) - fetchTime,
                                     (machineCycles - nonCode)>>3, idleTime>>3, irqTime>>3, machineCycles>>3, betweenDraws) << std::endl;
            lastDrawCycle = _impl->_cpu.getCycles();
        }
        lastCycles = _impl->_cpu.getCycles();
        lastIdle = _impl->_cpu.getIdleCycles();
        lastIrq = _impl->_cpu.getIrqCycles();
#endif
        if(_impl->_cpu.getExecMode() == ePAUSED) {
            setExecMode(ePAUSED);
            _backendStopped = true;
        }
        else if (_execMode == eSTEP || (_execMode == eSTEPOVER && getSP() <= _stepOverSP)) {
            setExecMode(ePAUSED);
        }
        auto nextOp = opcode();
        bool newFrame = lastFC > fc;
        lastFC = fc;
        if(newFrame) {
            _host.updateScreen();
            if ((nextOp & 0xF000) == 0x1000 && (opcode() & 0xFFF) == getPC()) {
                if (++endlessLoops > 2) {
                    setExecMode(ePAUSED);
                    endlessLoops = 0;
                }
            }
            else {
                endlessLoops = 0;
            }
        }
        if(hasBreakPoint(getPC())) {
            if(Chip8VIP::findBreakpoint(getPC())) {
                setExecMode(ePAUSED);
                _breakpointTriggered = true;
            }
        }
        return true;
    }
    else if(_impl->_cpu.getExecMode() == ePAUSED || _impl->_cpu.getCpuState() == Cdp1802::eERROR) {
        setExecMode(ePAUSED);
        _backendStopped = true;
    }
    if(!_isHybridChipMode)
        _cycles++;
    return false;
}

void Chip8VIP::executeInstruction()
{
    if (_execMode == ePAUSED || _cpuState == eERROR) {
        setExecMode(ePAUSED);
        return;
    }
    //std::clog << "CHIP8: " << dumpStateLine() << std::endl;
    auto start = _impl->_cpu.getCycles();
    while(!executeCdp1802() && _execMode != ePAUSED && _impl->_cpu.getCycles() - start < 3668*14);
}

void Chip8VIP::executeInstructions(int numInstructions)
{
    for(int i = 0; i < numInstructions; ++i) {
        executeInstruction();
    }
}

//---------------------------------------------------------------------------
// For easier handling we shift the line/cycle counting to the start of the
// interrupt (if display is enabled)

inline int Chip8VIP::frameCycle() const
{
    return Cdp186x::frameCycle(_impl->_cpu.getCycles()); // _impl->_irqStart ? ((_impl->_cpu.getCycles() >> 3) - _impl->_irqStart) : 0;
}

inline int Chip8VIP::videoLine() const
{
    return Cdp186x::videoLine(_impl->_cpu.getCycles()); // (frameCycle() + (78*14)) % 3668) / 14;
}

void Chip8VIP::tick(int)
{
    if (_execMode == ePAUSED || _cpuState == eERROR) {
        setExecMode(ePAUSED);
        return;
    }
    auto nextFrame = Cdp186x::nextFrame(_impl->_cpu.getCycles());
    while(_execMode != ePAUSED && _impl->_cpu.getCycles() < nextFrame) {
        executeCdp1802();
    }
}

int64_t Chip8VIP::executeFor(int64_t microseconds)
{
    if(_execMode != ePAUSED) {
        auto cpuTime = _impl->_cpu.getTime();
        auto endTime = cpuTime + Time::fromMicroseconds(microseconds);
        while(_execMode != GenericCpu::ePAUSED && _impl->_cpu.getTime() < endTime) {
            executeInstruction();
        }
        return _impl->_cpu.getTime().difference_us(endTime);
    }
    return 0;
}

bool Chip8VIP::isDisplayEnabled() const
{
    return _impl->_video.isDisplayEnabled();
}

uint8_t* Chip8VIP::memory()
{
    return _impl->_ram.data();
}

int Chip8VIP::memSize() const
{
    return _impl->_memorySize;
}

int64_t Chip8VIP::frames() const
{
    return _impl->_video.frames();
}

/*
float Chip8VIP::getAudioPhase() const
{
    return _impl->_wavePhase;
}

void Chip8VIP::setAudioPhase(float phase)
{
    _impl->_wavePhase = phase;
}

float Chip8VIP::getAudioFrequency() const
{
    return _impl->_video.getType() == Cdp186x::eVP590 ? 27535.0f / ((unsigned)_impl->_frequencyLatch + 1) : 1400.0f;
}
*/
void Chip8VIP::renderAudio(int16_t* samples, size_t frames, int sampleFrequency)
{
    if(_impl->_cpu.getQ()) {
        auto audioFrequency = _impl->_video.getType() == Cdp186x::eVP590 ? 27535.0f / ((unsigned)_impl->_frequencyLatch + 1) : 1400.0f;
        const float step = audioFrequency / sampleFrequency;
        for (int i = 0; i < frames; ++i) {
            *samples++ = (_impl->_wavePhase > 0.5f) ? 16384 : -16384;
            _impl->_wavePhase = std::fmod(_impl->_wavePhase + step, 1.0f);
        }
    }
    else {
        // Default is silence
        _impl->_wavePhase = 0;
        IChip8Emulator::renderAudio(samples, frames, sampleFrequency);
    }
}

uint16_t Chip8VIP::getCurrentScreenWidth() const
{
    return 64;
}

uint16_t Chip8VIP::getCurrentScreenHeight() const
{
    return 128;
}

uint16_t Chip8VIP::getMaxScreenWidth() const
{
    return 64;
}

uint16_t Chip8VIP::getMaxScreenHeight() const
{
    return 128;
}

const IChip8Emulator::VideoType* Chip8VIP::getScreen() const
{
    return &_impl->_video.getScreen();
}

GenericCpu& Chip8VIP::getBackendCpu()
{
    return _impl->_cpu;
}

uint8_t Chip8VIP::readByte(uint16_t addr) const
{
    if(addr < _impl->_memorySize) {
        if(_impl->_mapRam || addr > _impl->_rom.size())
            return _impl->_ram[addr];
        return _impl->_rom[addr & (_impl->_rom.size() - 1)];
    }
    if(addr >= 0xC000 && addr < 0xD000)
        return _impl->_colorRam[addr & _impl->_colorRamMaskLores];
    if(addr >= 0xD000 && addr < 0xE000)
        return _impl->_colorRam[addr & _impl->_colorRamMask];
    if(addr >= 0x8000 && addr < 0x8200)
        return _impl->_rom[addr & 0x1ff];
    //_cpuState = eERROR;
    return 0;
}

uint8_t Chip8VIP::readByteDMA(uint16_t addr) const
{
    if(addr < _impl->_memorySize)
        return _impl->_ram[addr];
    if(addr >= 0xC000 && addr < 0xD000)
        return _impl->_colorRam[addr & _impl->_colorRamMaskLores];
    if(addr >= 0xD000 && addr < 0xE000)
        return _impl->_colorRam[addr & _impl->_colorRamMask];
    if(addr >= 0x8000 && addr < 0x8200)
        return _impl->_rom[addr & 0x1ff];
    return 0;
}

uint8_t Chip8VIP::getMemoryByte(uint32_t addr) const
{
    return readByteDMA(addr);
}

void Chip8VIP::writeByte(uint16_t addr, uint8_t val)
{
    if(addr < _impl->_memorySize)
        _impl->_ram[addr] = val;
    else if(_impl->_video.getType() == Cdp186x::eVP590 && addr >= 0xC000 && addr < 0xE000) {
        if(addr < 0xD000) {
            _impl->_colorRam[addr & _impl->_colorRamMaskLores] = val & 7;
            _impl->_video.setSubMode(Cdp186x::eVP590_LORES);
        }
        else {
            //std::cout << fmt::format("color {:04x} = {:02x}", addr, val) << std::endl;
            _impl->_colorRam[addr & _impl->_colorRamMask] = val & 7;
            _impl->_video.setSubMode(Cdp186x::eVP590_HIRES);
        }
    }
    else {
        //setExecMode(ePAUSED);
        //_cpuState = eERROR;
    }
}

std::vector<uint8_t> Chip8VIP::getInterpreterCode(const std::string& name)
{
    std::vector<uint8_t> memory;
    memory.resize(4096, 0);
    std::memcpy(memory.data(), _chip8_cvip, sizeof(_chip8_cvip));
    uint16_t used = 512;
    if(name != "CHIP8")
        used = patchRAM(name, memory.data(), memory.size());
    if(!used)
        return {};
    memory.resize(std::max(sizeof(_chip8_cvip), (size_t)used));
    return memory;
}


}
