#include <emulation/chip8vip.hpp>

#include <fmt/format.h>

namespace emu {

class Chip8VIP::Private {
public:
    explicit Private(Cdp1802Bus& bus) : _cpu(bus) {}
    Cdp1802 _cpu;
    int64_t _cycles{0};
    int64_t _frames{0};
    int64_t _nextFrame{0};
    ExecMode _execMode{ePAUSED};
    CpuState _cpuState{eNORMAL};
    uint16_t _stepOverSP{};
    std::array<uint8_t,MAX_MEMORY_SIZE> _ram{};
    std::array<uint8_t,MAX_MEMORY_SIZE> _ram_b{};
    std::array<uint8_t,512> _rom{};
};

static const uint8_t _chip8_cvip[0x200] = {
    0x91, 0xbb, 0xff, 0x01, 0xb2, 0xb6, 0xf8, 0xcf, 0xa2, 0xf8, 0x81, 0xb1, 0xf8, 0x46, 0xa1, 0x90, 0xb4, 0xf8, 0x1b, 0xa4, 0xf8, 0x01, 0xb5, 0xf8, 0xfc, 0xa5, 0xd4, 0x96, 0xb7, 0xe2, 0x94, 0xbc, 0x45, 0xaf, 0xf6, 0xf6, 0xf6, 0xf6, 0x32, 0x44,
    0xf9, 0x50, 0xac, 0x8f, 0xfa, 0x0f, 0xf9, 0xf0, 0xa6, 0x05, 0xf6, 0xf6, 0xf6, 0xf6, 0xf9, 0xf0, 0xa7, 0x4c, 0xb3, 0x8c, 0xfc, 0x0f, 0xac, 0x0c, 0xa3, 0xd3, 0x30, 0x1b, 0x8f, 0xfa, 0x0f, 0xb3, 0x45, 0x30, 0x40, 0x22, 0x69, 0x12, 0xd4, 0x00,
    0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x7c, 0x75, 0x83, 0x8b, 0x95, 0xb4, 0xb7, 0xbc, 0x91, 0xeb, 0xa4, 0xd9, 0x70, 0x99, 0x05, 0x06, 0xfa, 0x07, 0xbe, 0x06, 0xfa, 0x3f, 0xf6,
    0xf6, 0xf6, 0x22, 0x52, 0x07, 0xfa, 0x1f, 0xfe, 0xfe, 0xfe, 0xf1, 0xac, 0x9b, 0xbc, 0x45, 0xfa, 0x0f, 0xad, 0xa7, 0xf8, 0xd0, 0xa6, 0x93, 0xaf, 0x87, 0x32, 0xf3, 0x27, 0x4a, 0xbd, 0x9e, 0xae, 0x8e, 0x32, 0xa4, 0x9d, 0xf6, 0xbd, 0x8f, 0x76,
    0xaf, 0x2e, 0x30, 0x98, 0x9d, 0x56, 0x16, 0x8f, 0x56, 0x16, 0x30, 0x8e, 0x00, 0xec, 0xf8, 0xd0, 0xa6, 0x93, 0xa7, 0x8d, 0x32, 0xd9, 0x06, 0xf2, 0x2d, 0x32, 0xbe, 0xf8, 0x01, 0xa7, 0x46, 0xf3, 0x5c, 0x02, 0xfb, 0x07, 0x32, 0xd2, 0x1c, 0x06,
    0xf2, 0x32, 0xce, 0xf8, 0x01, 0xa7, 0x06, 0xf3, 0x5c, 0x2c, 0x16, 0x8c, 0xfc, 0x08, 0xac, 0x3b, 0xb3, 0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4, 0x9b, 0xbf, 0xf8, 0xff, 0xaf, 0x93, 0x5f, 0x8f, 0x32, 0xdf, 0x2f, 0x30, 0xe5, 0x00, 0x42, 0xb5,
    0x42, 0xa5, 0xd4, 0x8d, 0xa7, 0x87, 0x32, 0xac, 0x2a, 0x27, 0x30, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xa3, 0x98, 0x56, 0xd4, 0xf8, 0x81, 0xbc, 0xf8, 0x95, 0xac, 0x22, 0xdc, 0x12, 0x56, 0xd4, 0x06, 0xb8, 0xd4,
    0x06, 0xa8, 0xd4, 0x64, 0x0a, 0x01, 0xe6, 0x8a, 0xf4, 0xaa, 0x3b, 0x28, 0x9a, 0xfc, 0x01, 0xba, 0xd4, 0xf8, 0x81, 0xba, 0x06, 0xfa, 0x0f, 0xaa, 0x0a, 0xaa, 0xd4, 0xe6, 0x06, 0xbf, 0x93, 0xbe, 0xf8, 0x1b, 0xae, 0x2a, 0x1a, 0xf8, 0x00, 0x5a,
    0x0e, 0xf5, 0x3b, 0x4b, 0x56, 0x0a, 0xfc, 0x01, 0x5a, 0x30, 0x40, 0x4e, 0xf6, 0x3b, 0x3c, 0x9f, 0x56, 0x2a, 0x2a, 0xd4, 0x00, 0x22, 0x86, 0x52, 0xf8, 0xf0, 0xa7, 0x07, 0x5a, 0x87, 0xf3, 0x17, 0x1a, 0x3a, 0x5b, 0x12, 0xd4, 0x22, 0x86, 0x52,
    0xf8, 0xf0, 0xa7, 0x0a, 0x57, 0x87, 0xf3, 0x17, 0x1a, 0x3a, 0x6b, 0x12, 0xd4, 0x15, 0x85, 0x22, 0x73, 0x95, 0x52, 0x25, 0x45, 0xa5, 0x86, 0xfa, 0x0f, 0xb5, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x82, 0x15, 0x15, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x88,
    0xd4, 0x45, 0x07, 0x30, 0x8c, 0x45, 0x07, 0x30, 0x84, 0xe6, 0x62, 0x26, 0x45, 0xa3, 0x36, 0x88, 0xd4, 0x3e, 0x88, 0xd4, 0xf8, 0xf0, 0xa7, 0xe7, 0x45, 0xf4, 0xa5, 0x86, 0xfa, 0x0f, 0x3b, 0xb2, 0xfc, 0x01, 0xb5, 0xd4, 0x45, 0x56, 0xd4, 0x45,
    0xe6, 0xf4, 0x56, 0xd4, 0x45, 0xfa, 0x0f, 0x3a, 0xc4, 0x07, 0x56, 0xd4, 0xaf, 0x22, 0xf8, 0xd3, 0x73, 0x8f, 0xf9, 0xf0, 0x52, 0xe6, 0x07, 0xd2, 0x56, 0xf8, 0xff, 0xa6, 0xf8, 0x00, 0x7e, 0x56, 0xd4, 0x19, 0x89, 0xae, 0x93, 0xbe, 0x99, 0xee,
    0xf4, 0x56, 0x76, 0xe6, 0xf4, 0xb9, 0x56, 0x45, 0xf2, 0x56, 0xd4, 0x45, 0xaa, 0x86, 0xfa, 0x0f, 0xba, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x4b
};

static const uint8_t _rom_cvip[0x200] = {
    0xf8, 0x80, 0xb2, 0xf8, 0x08, 0xa2, 0xe2, 0xd2, 0x64, 0x00, 0x62, 0x0c, 0xf8, 0xff, 0xa1, 0xf8, 0x0f, 0xb1, 0xf8, 0xaa, 0x51, 0x01, 0xfb, 0xaa, 0x32, 0x22, 0x91, 0xff, 0x04, 0x3b, 0x22, 0xb1, 0x30, 0x12, 0x36, 0x28, 0x90, 0xa0, 0xe0, 0xd0,
    0xe1, 0xf8, 0x00, 0x73, 0x81, 0xfb, 0xaf, 0x3a, 0x29, 0xf8, 0xd2, 0x73, 0xf8, 0x9f, 0x51, 0x81, 0xa0, 0x91, 0xb0, 0xf8, 0xcf, 0xa1, 0xd0, 0x73, 0x20, 0x20, 0x40, 0xff, 0x01, 0x20, 0x50, 0xfb, 0x82, 0x3a, 0x3e, 0x92, 0xb3, 0xf8, 0x51, 0xa3,
    0xd3, 0x90, 0xb2, 0xbb, 0xbd, 0xf8, 0x81, 0xb1, 0xb4, 0xb5, 0xb7, 0xba, 0xbc, 0xf8, 0x46, 0xa1, 0xf8, 0xaf, 0xa2, 0xf8, 0xdd, 0xa4, 0xf8, 0xc6, 0xa5, 0xf8, 0xba, 0xa7, 0xf8, 0xa1, 0xac, 0xe2, 0x69, 0xdc, 0xd7, 0xd7, 0xd7, 0xb6, 0xd7, 0xd7,
    0xd7, 0xa6, 0xd4, 0xdc, 0xbe, 0x32, 0xf4, 0xfb, 0x0a, 0x32, 0xef, 0xdc, 0xae, 0x22, 0x61, 0x9e, 0xfb, 0x0b, 0x32, 0xc2, 0x9e, 0xfb, 0x0f, 0x3a, 0x8f, 0xf8, 0x6f, 0xac, 0xf8, 0x40, 0xb9, 0x93, 0xf6, 0xdc, 0x29, 0x99, 0x3a, 0x97, 0xf8, 0x10,
    0xa7, 0xf8, 0x08, 0xa9, 0x46, 0xb7, 0x93, 0xfe, 0xdc, 0x86, 0x3a, 0xad, 0x2e, 0x97, 0xf6, 0xb7, 0xdc, 0x29, 0x89, 0x3a, 0xad, 0x17, 0x87, 0xf6, 0xdc, 0x8e, 0x3a, 0x9e, 0xdc, 0x69, 0x26, 0xd4, 0x30, 0xc0, 0xf8, 0x83, 0xac, 0xf8, 0x0a, 0xb9,
    0xdc, 0x33, 0xc5, 0x29, 0x99, 0x3a, 0xc8, 0xdc, 0x3b, 0xcf, 0xf8, 0x09, 0xa9, 0xa7, 0x97, 0x76, 0xb7, 0x29, 0xdc, 0x89, 0x3a, 0x06, 0x87, 0xf6, 0x33, 0xe3, 0x7b, 0x97, 0x56, 0x16, 0x86, 0x3a, 0xcf, 0x2e, 0x8e, 0x3a, 0xcf, 0x30, 0xbd, 0xdc,
    0x16, 0xd4, 0x30, 0xef, 0xd7, 0xd7, 0xd7, 0x56, 0xd4, 0x16, 0x30, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39, 0x22, 0x2a, 0x3e, 0x20, 0x24, 0x34, 0x26, 0x28, 0x2e, 0x18, 0x14, 0x1c, 0x10, 0x12, 0xf0, 0x80, 0xf0, 0x80, 0xf0, 0x80, 0x80, 0x80,
    0xf0, 0x50, 0x70, 0x50, 0xf0, 0x50, 0x50, 0x50, 0xf0, 0x80, 0xf0, 0x10, 0xf0, 0x80, 0xf0, 0x90, 0xf0, 0x90, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x90, 0xf0, 0x90, 0x90, 0x90, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x60, 0x20, 0x20, 0x20, 0x70, 0xa0, 0xa0,
    0xf0, 0x20, 0x20, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8, 0x00, 0xa0, 0x9b, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0x3c, 0x53, 0x98, 0x32, 0x67, 0xab, 0x2b, 0x8b, 0xb8, 0x88,
    0x32, 0x43, 0x78, 0x28, 0x30, 0x44, 0xd3, 0xf8, 0x0a, 0x3b, 0x76, 0xf8, 0x20, 0x17, 0x7b, 0xbf, 0xff, 0x01, 0x3a, 0x78, 0x39, 0x6e, 0x7a, 0x9f, 0x30, 0x78, 0xd3, 0xf8, 0x10, 0x3d, 0x85, 0x3d, 0x8f, 0xff, 0x01, 0x3a, 0x87, 0x17, 0x9c, 0xfe,
    0x35, 0x90, 0x30, 0x82, 0xd3, 0xe2, 0x9c, 0xaf, 0x2f, 0x22, 0x8f, 0x52, 0x62, 0xe2, 0xe2, 0x3e, 0x98, 0xf8, 0x04, 0xa8, 0x88, 0x3a, 0xa4, 0xf8, 0x04, 0xa8, 0x36, 0xa7, 0x88, 0x31, 0xaa, 0x8f, 0xfa, 0x0f, 0x52, 0x30, 0x94, 0x00, 0x00, 0x00,
    0x00, 0xd3, 0xdc, 0xfe, 0xfe, 0xfe, 0xfe, 0xae, 0xdc, 0xbe, 0xf1, 0x30, 0xb9, 0xd4, 0xaa, 0x0a, 0xaa, 0xf8, 0x05, 0xaf, 0x4a, 0x5d, 0x8d, 0xfc, 0x08, 0xad, 0x2f, 0x8f, 0x3a, 0xcc, 0x8d, 0xfc, 0xd9, 0xad, 0x30, 0xc5, 0xd3, 0x22, 0x06, 0x73,
    0x86, 0x73, 0x96, 0x52, 0xf8, 0x06, 0xae, 0xf8, 0xd8, 0xad, 0x02, 0xf6, 0xf6, 0xf6, 0xf6, 0xd5, 0x42, 0xfa, 0x0f, 0xd5, 0x8e, 0xf6, 0xae, 0x32, 0xdc, 0x3b, 0xea, 0x1d, 0x1d, 0x30, 0xea, 0x01
};

Chip8VIP::Chip8VIP(Chip8EmulatorHost& host)
: _impl(new Private(*this))
{
    std::memcpy(_impl->_rom.data(), _rom_cvip, sizeof(_rom_cvip));
    _impl->_cpu.setInputHandler([this](uint8_t port) { return 0; });
    _impl->_cpu.setOutputHandler([this](uint8_t port, uint8_t val){});
    Chip8VIP::reset();
}

Chip8VIP::~Chip8VIP()
{

}

void Chip8VIP::reset()
{
    std::memset(_impl->_ram.data(), 0, MAX_MEMORY_SIZE);
    std::memcpy(_impl->_ram.data(), _chip8_cvip, sizeof(_chip8_cvip));
    _impl->_cpu.setEF(0,true);
    _impl->_cpu.setEF(1,true);
    _impl->_cpu.setEF(2,true);
    _impl->_cpu.setEF(3,true);
    _impl->_cpu.reset();
    _impl->_cycles = 0;
    _impl->_frames = 0;
    _impl->_nextFrame = 0;
    do {
        _impl->_cpu.executeInstruction();
        /*if(_impl->_cpu.PC() == 0x1B)
            std::clog << "CHIP8: " << dumStateLine() << std::endl;*/
    }
    while(_impl->_cpu.PC() != 0x1B || getPC() != 0x200);
    //_impl->_nextFrame = _impl->_cpu.getCycles();
}

std::string Chip8VIP::name() const
{
    return "Chip-8-RVIP";
}

void Chip8VIP::executeInstruction()
{
    if (_impl->_execMode == ePAUSED || _impl->_cpuState == eERROR)
        return;
    //std::clog << "CHIP8: " << dumStateLine() << std::endl;
    do {
        _impl->_cpu.executeInstruction();
    }
    while(_impl->_cpu.PC() != 0x1B);
    _impl->_cycles++;
    if (_impl->_execMode == eSTEP || (_impl->_execMode == eSTEPOVER && getSP() <= _impl->_stepOverSP)) {
        _impl->_execMode = ePAUSED;
    }
}

void Chip8VIP::executeInstructions(int numInstructions)
{
    for(int i = 0; i < numInstructions; ++i) {
        executeInstruction();
    }
}

void Chip8VIP::tick(int instructionsPerFrame)
{
    if (_impl->_execMode == ePAUSED || _impl->_cpuState == eERROR)
        return;
    // execute 1 frame, 3668 machine cycles
    _impl->_cpu.triggerIrq();
    if(!_impl->_nextFrame)
        _impl->_nextFrame = _impl->_cpu.getCycles() + 3668 * 8;
    auto irqStart = _impl->_cpu.getCycles() >> 3;
    do {
        auto frameCycle = (_impl->_cpu.getCycles() >> 3) - irqStart;
        _impl->_cpu.setEF(0, frameCycle < 24 || frameCycle >= 24+128*14);
        _impl->_cpu.executeInstruction();
    }
    while(!_impl->_cpu.getIE());
    while(_impl->_cpu.getCycles() < _impl->_nextFrame && _impl->_execMode != ePAUSED) {
        executeInstruction();
    }
    _impl->_nextFrame += 3668 * 8;
    _impl->_frames++;
}

uint8_t Chip8VIP::getV(uint8_t index) const
{
    return _impl->_ram[0xef0 + (index&0xf)];
}

uint32_t Chip8VIP::getPC() const
{
    return _impl->_cpu.getR(5);
}

uint32_t Chip8VIP::getI() const
{
    return _impl->_cpu.getR(0xa);
}

uint8_t Chip8VIP::getSP() const
{
    return (0xecf - _impl->_cpu.getR(2)) >> 1;
}

uint8_t Chip8VIP::stackSize() const
{
    return 12;
}

const uint16_t* Chip8VIP::getStackElements() const
{
    static uint16_t dummy[16];
    for(int i = 0; i < stackSize(); ++i) {
        dummy[i] = (_impl->_ram[0xecd - i*2] << 8) | _impl->_ram[0xecf - i*2 - 1];
    }
    return dummy;
}

uint8_t* Chip8VIP::memory()
{
    return _impl->_ram.data();
}

uint8_t* Chip8VIP::memoryCopy()
{
    return _impl->_ram_b.data();
}

int Chip8VIP::memSize() const
{
    return 4096;
}

int64_t Chip8VIP::cycles() const
{
    return _impl->_cycles;
}

int64_t Chip8VIP::frames() const
{
    return _impl->_frames;
}

uint8_t Chip8VIP::delayTimer() const
{
    return _impl->_cpu.getR(8) >> 8;
}

uint8_t Chip8VIP::soundTimer() const
{
    return _impl->_cpu.getR(8) & 0xff;
}

std::pair<uint16_t, std::string> Chip8VIP::disassembleInstruction(const uint8_t* code, const uint8_t* end)
{
    return {2,"Not implemented"};
}

std::string Chip8VIP::dumStateLine() const
{
    uint16_t op = (readByte(getPC())<<8)|readByte(getPC() + 1);
    return fmt::format("V0:{:02x} V1:{:02x} V2:{:02x} V3:{:02x} V4:{:02x} V5:{:02x} V6:{:02x} V7:{:02x} V8:{:02x} V9:{:02x} VA:{:02x} VB:{:02x} VC:{:02x} VD:{:02x} VE:{:02x} VF:{:02x} I:{:04x} SP:{:1x} PC:{:04x} O:{:04x}", getV(0), getV(1), getV(2),
                       getV(3), getV(4), getV(5), getV(6), getV(7), getV(8), getV(9), getV(10), getV(11), getV(12), getV(13), getV(14), getV(15), getI(), getSP(), getPC(), op);
}

void Chip8VIP::setExecMode(ExecMode mode)
{
    _impl->_execMode = mode;
    if(mode == eSTEPOVER)
        _impl->_stepOverSP = getSP();
}

IChip8Emulator::ExecMode Chip8VIP::execMode() const
{
    return _impl->_execMode;
}

IChip8Emulator::CpuState Chip8VIP::cpuState() const
{
    return _impl->_cpuState;
}

const uint8_t* Chip8VIP::getScreenBuffer() const
{
    static uint8_t screenBuffer[256*192];
    for(int i = 0; i < 8*32; ++i) {
        auto data = _impl->_ram[0xf00 + i];
        for(int j = 0; j < 8; ++j) {
            screenBuffer[(i>>3)*256 + (i&7)*8 + j] = (data >> (7-j)) & 1;
        }
    }
    return screenBuffer;
}

uint8_t Chip8VIP::readByte(uint16_t addr) const
{
    if(addr < 0x1000)
        return _impl->_ram[addr];
    if(addr >= 0x8000 && addr < 0x8200)
        return _impl->_rom[addr & 0x1ff];
    return 0;
}
void Chip8VIP::writeByte(uint16_t addr, uint8_t val)
{
    if(addr < 0x1000)
        _impl->_ram[addr] = val;
}

}
