#include <emulation/chip8vip.hpp>
#include <emulation/logger.hpp>

#include <fmt/format.h>

#include <atomic>

#define VIDEO_FIRST_VISIBLE_LINE 80
#define VIDEO_FIRST_INVISIBLE_LINE  208

namespace emu {

class Chip8VIP::Private {
public:
    explicit Private(Chip8EmulatorHost& host, Cdp1802Bus& bus) : _host(host), _cpu(bus) {}
    Chip8EmulatorHost& _host;
    Cdp1802 _cpu;
    int64_t _cycles{0};
    int64_t _frames{0};
    int64_t _irqStart{0};
    int64_t _nextFrame{0};
    ExecMode _execMode{ePAUSED};
    CpuState _cpuState{eNORMAL};
    uint16_t _stepOverSP{};
    uint8_t _keyLatch{0};
    std::atomic<float> _wavePhase{0};
    bool _displayEnabled{false};
    std::array<uint8_t,MAX_MEMORY_SIZE> _ram{};
    std::array<uint8_t,MAX_MEMORY_SIZE> _ram_b{};
    std::array<uint8_t,512> _rom{};
    uint16_t _rC8PC{};
    uint16_t _rSP_b{};
    uint8_t _rDT_b{};
    uint8_t _rST_b{};
    uint16_t _rI_b{};
    std::array<uint16_t,16> _stack_b{};
    std::array<uint8_t,16> _rV_b{};
    std::array<uint8_t,4096> _breakMap;
    std::array<uint8_t,256*192> _screenBuffer;
    std::map<uint32_t,BreakpointInfo> _breakpoints;
};

namespace cdp1861 {

inline int64_t machineCycle(int64_t cycles)
{
    return cycles >> 3;
}

inline int frameCycle(int64_t cycles)
{
    return machineCycle(cycles) % 3668;
}

inline int videoLine(int64_t cycles)
{
    return frameCycle(cycles) / 14;
}

inline int preIrqCycles(int64_t cycles)
{
    auto fc = frameCycle(cycles);
    return fc < 78*14 ? 78*14 - fc : 0;
}

inline bool getNEFX(int64_t cycles)
{
    auto fc = frameCycle(cycles);
    return !((fc >= 76*14 && fc < 80*14) || (fc > 204*14 && fc < 208*14));
}

inline bool interruptRequest(int64_t cycles)
{
    auto fc = frameCycle(cycles);
    return fc >= 78*14 && fc < 80*14;
}

inline int64_t nextFrame(int64_t cycles)
{
    return (cycles + 8*3668) % (8*3668);
}

};

struct Patch {
    uint16_t offset;
    std::vector<uint8_t> bytes;
};

struct PatchSet {
    std::vector<Patch> patches;
};

static const uint8_t _chip8_cvip[0x200] = {
    0x91, 0xbb, 0xff, 0x01, 0xb2, 0xb6, 0xf8, 0xcf, 0xa2, 0xf8, 0x81, 0xb1, 0xf8, 0x46, 0xa1, 0x90, 0xb4, 0xf8, 0x1b, 0xa4, 0xf8, 0x01, 0xb5, 0xf8, 0xfc, 0xa5, 0xd4, 0x96, 0xb7, 0xe2, 0x94, 0xbc, 0x45, 0xaf, 0xf6, 0xf6, 0xf6, 0xf6, 0x32, 0x44,
    0xf9, 0x50, 0xac, 0x8f, 0xfa, 0x0f, 0xf9, 0xf0, 0xa6, 0x05, 0xf6, 0xf6, 0xf6, 0xf6, 0xf9, 0xf0, 0xa7, 0x4c, 0xb3, 0x8c, 0xfc, 0x0f, 0xac, 0x0c, 0xa3, 0xd3, 0x30, 0x1b, 0x8f, 0xfa, 0x0f, 0xb3, 0x45, 0x30, 0x40, 0x22, 0x69, 0x12, 0xd4, 0x00,
    0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x7c, 0x75, 0x83, 0x8b, 0x95, 0xb4, 0xb7, 0xbc, 0x91, 0xeb, 0xa4, 0xd9, 0x70, 0x99, 0x05, 0x06, 0xfa, 0x07, 0xbe, 0x06, 0xfa, 0x3f, 0xf6,
    0xf6, 0xf6, 0x22, 0x52, 0x07, 0xfa, 0x1f, 0xfe, 0xfe, 0xfe, 0xf1, 0xac, 0x9b, 0xbc, 0x45, 0xfa, 0x0f, 0xad, 0xa7, 0xf8, 0xd0, 0xa6, 0x93, 0xaf, 0x87, 0x32, 0xf3, 0x27, 0x4a, 0xbd, 0x9e, 0xae, 0x8e, 0x32, 0xa4, 0x9d, 0xf6, 0xbd, 0x8f, 0x76,
    0xaf, 0x2e, 0x30, 0x98, 0x9d, 0x56, 0x16, 0x8f, 0x56, 0x16, 0x30, 0x8e, 0x00, 0xec, 0xf8, 0xd0, 0xa6, 0x93, 0xa7, 0x8d, 0x32, 0xd9, 0x06, 0xf2, 0x2d, 0x32, 0xbe, 0xf8, 0x01, 0xa7, 0x46, 0xf3, 0x5c, 0x02, 0xfb, 0x07, 0x32, 0xd2, 0x1c, 0x06,
    0xf2, 0x32, 0xce, 0xf8, 0x01, 0xa7, 0x06, 0xf3, 0x5c, 0x2c, 0x16, 0x8c, 0xfc, 0x08, 0xac, 0x3b, 0xb3, 0xf8, 0xff, 0xa6, 0x87, 0x56, 0x12, 0xd4, 0x9b, 0xbf, 0xf8, 0xff, 0xaf, 0x93, 0x5f, 0x8f, 0x32, 0xdf, 0x2f, 0x30, 0xe5, 0x00, 0x42, 0xb5,
    0x42, 0xa5, 0xd4, 0x8d, 0xa7, 0x87, 0x32, 0xac, 0x2a, 0x27, 0x30, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xa3, 0x98, 0x56, 0xd4, 0xf8, 0x81, 0xbc, 0xf8, 0x95, 0xac, 0x22, 0xdc, 0x12, 0x56, 0xd4, 0x06, 0xb8, 0xd4,
    0x06, 0xa8, 0xd4, 0x64, 0x0a, 0x01, 0xe6, 0x8a, 0xf4, 0xaa, 0x3b, 0x28, 0x9a, 0xfc, 0x01, 0xba, 0xd4, 0xf8, 0x81, 0xba, 0x06, 0xfa, 0x0f, 0xaa, 0x0a, 0xaa, 0xd4, 0xe6, 0x06, 0xbf, 0x93, 0xbe, 0xf8, 0x1b, 0xae, 0x2a, 0x1a, 0xf8, 0x00, 0x5a,
    0x0e, 0xf5, 0x3b, 0x4b, 0x56, 0x0a, 0xfc, 0x01, 0x5a, 0x30, 0x40, 0x4e, 0xf6, 0x3b, 0x3c, 0x9f, 0x56, 0x2a, 0x2a, 0xd4, 0x00, 0x22, 0x86, 0x52, 0xf8, 0xf0, 0xa7, 0x07, 0x5a, 0x87, 0xf3, 0x17, 0x1a, 0x3a, 0x5b, 0x12, 0xd4, 0x22, 0x86, 0x52,
    0xf8, 0xf0, 0xa7, 0x0a, 0x57, 0x87, 0xf3, 0x17, 0x1a, 0x3a, 0x6b, 0x12, 0xd4, 0x15, 0x85, 0x22, 0x73, 0x95, 0x52, 0x25, 0x45, 0xa5, 0x86, 0xfa, 0x0f, 0xb5, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x82, 0x15, 0x15, 0xd4, 0x45, 0xe6, 0xf3, 0x3a, 0x88,
    0xd4, 0x45, 0x07, 0x30, 0x8c, 0x45, 0x07, 0x30, 0x84, 0xe6, 0x62, 0x26, 0x45, 0xa3, 0x36, 0x88, 0xd4, 0x3e, 0x88, 0xd4, 0xf8, 0xf0, 0xa7, 0xe7, 0x45, 0xf4, 0xa5, 0x86, 0xfa, 0x0f, 0x3b, 0xb2, 0xfc, 0x01, 0xb5, 0xd4, 0x45, 0x56, 0xd4, 0x45,
    0xe6, 0xf4, 0x56, 0xd4, 0x45, 0xfa, 0x0f, 0x3a, 0xc4, 0x07, 0x56, 0xd4, 0xaf, 0x22, 0xf8, 0xd3, 0x73, 0x8f, 0xf9, 0xf0, 0x52, 0xe6, 0x07, 0xd2, 0x56, 0xf8, 0xff, 0xa6, 0xf8, 0x00, 0x7e, 0x56, 0xd4, 0x19, 0x89, 0xae, 0x93, 0xbe, 0x99, 0xee,
    0xf4, 0x56, 0x76, 0xe6, 0xf4, 0xb9, 0x56, 0x45, 0xf2, 0x56, 0xd4, 0x45, 0xaa, 0x86, 0xfa, 0x0f, 0xba, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x4b
};

static std::map<std::string,PatchSet> g_patchSets = {
    // CHIP-8I:
    // 01A4 86 FA 01 3A AC E5 63 D4 E7 45 FA  01 3A F2 63 D4 3F F2 6B 3F F5 D4
    {
        "CHIP-8I",
        {{
            {0x1A4, {0x86, 0xFA, 0x01, 0x3A, 0xAC, 0xE5, 0x63, 0xD4, 0xE7, 0x45, 0xFA, 0x01, 0x3A, 0xF2, 0x63, 0xD4}},
            {0x1F2, {0x3F, 0xF2, 0x6B, 0x3F, 0xF5, 0xD4}}
        }}
    },
    {
        "CHIP-10 4k", // Ben H. Hutchinson, Jr.
        {{
            {0x000, {0x91, 0xFF, 0x03, 0xBB, 0xFF, 0x01, 0xB2, 0xB6, 0xF8, 0xCF, 0xA2, 0xF8, 0x73, 0xA1, 0x90, 0xB1}},
            {0x05D, {0x0B}},
            {0x06D, {0x00}},
            {0x070, {0x00, 0x42, 0x70, 0xC4, 0x22, 0x78, 0x22, 0x52, 0x19, 0xF8, 0x00, 0xA0, 0x9B, 0xB0, 0x98, 0x32, 0x85, 0xAB, 0x2B, 0x8B, 0xB8, 0x88, 0x32, 0x8C, 0x7B, 0x28, 0x30, 0x8D, 0x7A, 0x34, 0x71, 0x30, 0x8D}}
            // TODO: missing bytes
        }}
    },
    {
        "CHIP-8-RB", // Relative Branching in CHIP-8, Wayne Smith
        {{
            {0x1A4, {0xE5, 0x86, 0xFC, 0x04, 0x85, 0x33, 0xFF, 0xF7, 0xA5, 0x33, 0xFA, 0x95, 0xFF, 0x01, 0x30}},
            {0x1F2, {0xF4, 0xA5, 0x3B, 0xFA, 0x95, 0xFC, 0x01, 0xB5, 0x25, 0xD4}}
        }}
    }
};

#if 0
static const uint8_t _rom_cvip[0x200] = {
    0xf8, 0x80, 0xb2, 0xf8, 0x08, 0xa2, 0xe2, 0xd2, 0x64, 0x00, 0x62, 0x0c, 0xf8, 0xff, 0xa1, 0xf8, 0x0f, 0xb1, 0xf8, 0xaa, 0x51, 0x01, 0xfb, 0xaa, 0x32, 0x22, 0x91, 0xff, 0x04, 0x3b, 0x22, 0xb1, 0x30, 0x12, 0x36, 0x28, 0x90, 0xa0, 0xe0, 0xd0,
    0xe1, 0xf8, 0x00, 0x73, 0x81, 0xfb, 0xaf, 0x3a, 0x29, 0xf8, 0xd2, 0x73, 0xf8, 0x9f, 0x51, 0x81, 0xa0, 0x91, 0xb0, 0xf8, 0xcf, 0xa1, 0xd0, 0x73, 0x20, 0x20, 0x40, 0xff, 0x01, 0x20, 0x50, 0xfb, 0x82, 0x3a, 0x3e, 0x92, 0xb3, 0xf8, 0x51, 0xa3,
    0xd3, 0x90, 0xb2, 0xbb, 0xbd, 0xf8, 0x81, 0xb1, 0xb4, 0xb5, 0xb7, 0xba, 0xbc, 0xf8, 0x46, 0xa1, 0xf8, 0xaf, 0xa2, 0xf8, 0xdd, 0xa4, 0xf8, 0xc6, 0xa5, 0xf8, 0xba, 0xa7, 0xf8, 0xa1, 0xac, 0xe2, 0x69, 0xdc, 0xd7, 0xd7, 0xd7, 0xb6, 0xd7, 0xd7,
    0xd7, 0xa6, 0xd4, 0xdc, 0xbe, 0x32, 0xf4, 0xfb, 0x0a, 0x32, 0xef, 0xdc, 0xae, 0x22, 0x61, 0x9e, 0xfb, 0x0b, 0x32, 0xc2, 0x9e, 0xfb, 0x0f, 0x3a, 0x8f, 0xf8, 0x6f, 0xac, 0xf8, 0x40, 0xb9, 0x93, 0xf6, 0xdc, 0x29, 0x99, 0x3a, 0x97, 0xf8, 0x10,
    0xa7, 0xf8, 0x08, 0xa9, 0x46, 0xb7, 0x93, 0xfe, 0xdc, 0x86, 0x3a, 0xad, 0x2e, 0x97, 0xf6, 0xb7, 0xdc, 0x29, 0x89, 0x3a, 0xad, 0x17, 0x87, 0xf6, 0xdc, 0x8e, 0x3a, 0x9e, 0xdc, 0x69, 0x26, 0xd4, 0x30, 0xc0, 0xf8, 0x83, 0xac, 0xf8, 0x0a, 0xb9,
    0xdc, 0x33, 0xc5, 0x29, 0x99, 0x3a, 0xc8, 0xdc, 0x3b, 0xcf, 0xf8, 0x09, 0xa9, 0xa7, 0x97, 0x76, 0xb7, 0x29, 0xdc, 0x89, 0x3a, 0x06, 0x87, 0xf6, 0x33, 0xe3, 0x7b, 0x97, 0x56, 0x16, 0x86, 0x3a, 0xcf, 0x2e, 0x8e, 0x3a, 0xcf, 0x30, 0xbd, 0xdc,
    0x16, 0xd4, 0x30, 0xef, 0xd7, 0xd7, 0xd7, 0x56, 0xd4, 0x16, 0x30, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39, 0x22, 0x2a, 0x3e, 0x20, 0x24, 0x34, 0x26, 0x28, 0x2e, 0x18, 0x14, 0x1c, 0x10, 0x12, 0xf0, 0x80, 0xf0, 0x80, 0xf0, 0x80, 0x80, 0x80,
    0xf0, 0x50, 0x70, 0x50, 0xf0, 0x50, 0x50, 0x50, 0xf0, 0x80, 0xf0, 0x10, 0xf0, 0x80, 0xf0, 0x90, 0xf0, 0x90, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x90, 0xf0, 0x90, 0x90, 0x90, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x60, 0x20, 0x20, 0x20, 0x70, 0xa0, 0xa0,
    0xf0, 0x20, 0x20, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8, 0x00, 0xa0, 0x9b, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0x3c, 0x53, 0x98, 0x32, 0x67, 0xab, 0x2b, 0x8b, 0xb8, 0x88,
    0x32, 0x43, 0x78, 0x28, 0x30, 0x44, 0xd3, 0xf8, 0x0a, 0x3b, 0x76, 0xf8, 0x20, 0x17, 0x7b, 0xbf, 0xff, 0x01, 0x3a, 0x78, 0x39, 0x6e, 0x7a, 0x9f, 0x30, 0x78, 0xd3, 0xf8, 0x10, 0x3d, 0x85, 0x3d, 0x8f, 0xff, 0x01, 0x3a, 0x87, 0x17, 0x9c, 0xfe,
    0x35, 0x90, 0x30, 0x82, 0xd3, 0xe2, 0x9c, 0xaf, 0x2f, 0x22, 0x8f, 0x52, 0x62, 0xe2, 0xe2, 0x3e, 0x98, 0xf8, 0x04, 0xa8, 0x88, 0x3a, 0xa4, 0xf8, 0x04, 0xa8, 0x36, 0xa7, 0x88, 0x31, 0xaa, 0x8f, 0xfa, 0x0f, 0x52, 0x30, 0x94, 0x00, 0x00, 0x00,
    0x00, 0xd3, 0xdc, 0xfe, 0xfe, 0xfe, 0xfe, 0xae, 0xdc, 0xbe, 0xf1, 0x30, 0xb9, 0xd4, 0xaa, 0x0a, 0xaa, 0xf8, 0x05, 0xaf, 0x4a, 0x5d, 0x8d, 0xfc, 0x08, 0xad, 0x2f, 0x8f, 0x3a, 0xcc, 0x8d, 0xfc, 0xd9, 0xad, 0x30, 0xc5, 0xd3, 0x22, 0x06, 0x73,
    0x86, 0x73, 0x96, 0x52, 0xf8, 0x06, 0xae, 0xf8, 0xd8, 0xad, 0x02, 0xf6, 0xf6, 0xf6, 0xf6, 0xd5, 0x42, 0xfa, 0x0f, 0xd5, 0x8e, 0xf6, 0xae, 0x32, 0xdc, 0x3b, 0xea, 0x1d, 0x1d, 0x30, 0xea, 0x01
};
#else
static const uint8_t _rom_cvip[0x200] = {
    0xf8, 0x80, 0xb2, 0xf8, 0x08, 0xa2, 0xe2, 0xd2, 0x64, 0x00, 0x62, 0x0c, 0xf8, 0xff, 0xa1, 0xf8, 0x0f, 0xb1, 0xf8, 0xaa, 0x51, 0x01, 0xfb, 0xaa, 0x32, 0x22, 0x91, 0xff, 0x04, 0x3b, 0x22, 0xb1, 0x30, 0x12, 0x36, 0x28, 0x90, 0xa0, 0xe0, 0xd0,
    0xe1, 0xf8, 0x00, 0x73, 0x81, 0xfb, 0xaf, 0x3a, 0x29, 0xf8, 0xd2, 0x73, 0xf8, 0x9f, 0x51, 0x81, 0xa0, 0x91, 0xb0, 0xf8, 0xcf, 0xa1, 0xd0, 0x73, 0x20, 0x20, 0x40, 0xff, 0x01, 0x20, 0x50, 0xfb, 0x82, 0x3a, 0x3e, 0x92, 0xb3, 0xf8, 0x51, 0xa3,
    0xd3, 0x90, 0xb2, 0xbb, 0xbd, 0xf8, 0x81, 0xb1, 0xb4, 0xb5, 0xb7, 0xba, 0xbc, 0xf8, 0x46, 0xa1, 0xf8, 0xaf, 0xa2, 0xf8, 0xdd, 0xa4, 0xf8, 0xc6, 0xa5, 0xf8, 0xba, 0xa7, 0xf8, 0xa1, 0xac, 0xe2, 0x69, 0xdc, 0xd7, 0xd7, 0xd7, 0xb6, 0xd7, 0xd7,
    0xd7, 0xa6, 0xd4, 0xdc, 0xbe, 0x32, 0xf4, 0xfb, 0x0a, 0x32, 0xef, 0xdc, 0xae, 0x22, 0x61, 0x9e, 0xfb, 0x0b, 0x32, 0xc2, 0x9e, 0xfb, 0x0f, 0x3a, 0x8f, 0xf8, 0x6f, 0xac, 0xf8, 0x40, 0xb9, 0x93, 0xf6, 0xdc, 0x29, 0x99, 0x3a, 0x97, 0xf8, 0x10,
    0xa7, 0xf8, 0x08, 0xa9, 0x46, 0xb7, 0x93, 0xfe, 0xdc, 0x86, 0x3a, 0xad, 0x2e, 0x97, 0xf6, 0xb7, 0xdc, 0x29, 0x89, 0x3a, 0xad, 0x17, 0x87, 0xf6, 0xdc, 0x8e, 0x3a, 0x9e, 0xdc, 0x69, 0x26, 0xd4, 0x30, 0xc0, 0xf8, 0x83, 0xac, 0xf8, 0x0a, 0xb9,
    0xdc, 0x33, 0xc5, 0x29, 0x99, 0x3a, 0xc8, 0xdc, 0x3b, 0xcf, 0xf8, 0x09, 0xa9, 0xa7, 0x97, 0x76, 0xb7, 0x29, 0xdc, 0x89, 0x3a, 0xd6, 0x87, 0xf6, 0x33, 0xe3, 0x7b, 0x97, 0x56, 0x16, 0x86, 0x3a, 0xcf, 0x2e, 0x8e, 0x3a, 0xcf, 0x30, 0xbd, 0xdc,
    0x16, 0xd4, 0x30, 0xef, 0xd7, 0xd7, 0xd7, 0x56, 0xd4, 0x16, 0x30, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39, 0x22, 0x2a, 0x3e, 0x20, 0x24, 0x34, 0x26, 0x28, 0x2e, 0x18, 0x14, 0x1c, 0x10, 0x12, 0xf0, 0x80, 0xf0, 0x80, 0xf0, 0x80, 0x80, 0x80,
    0xf0, 0x50, 0x70, 0x50, 0xf0, 0x50, 0x50, 0x50, 0xf0, 0x80, 0xf0, 0x10, 0xf0, 0x80, 0xf0, 0x90, 0xf0, 0x90, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x90, 0xf0, 0x90, 0x90, 0x90, 0xf0, 0x10, 0x10, 0x10, 0x10, 0x60, 0x20, 0x20, 0x20, 0x70, 0xa0, 0xa0,
    0xf0, 0x20, 0x20, 0x7a, 0x42, 0x70, 0x22, 0x78, 0x22, 0x52, 0xc4, 0x19, 0xf8, 0x00, 0xa0, 0x9b, 0xb0, 0xe2, 0xe2, 0x80, 0xe2, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0xe2, 0x20, 0xa0, 0x3c, 0x53, 0x98, 0x32, 0x67, 0xab, 0x2b, 0x8b, 0xb8, 0x88,
    0x32, 0x43, 0x7b, 0x28, 0x30, 0x44, 0xd3, 0xf8, 0x0a, 0x3b, 0x76, 0xf8, 0x20, 0x17, 0x7b, 0xbf, 0xff, 0x01, 0x3a, 0x78, 0x39, 0x6e, 0x7a, 0x9f, 0x30, 0x78, 0xd3, 0xf8, 0x10, 0x3d, 0x85, 0x3d, 0x8f, 0xff, 0x01, 0x3a, 0x87, 0x17, 0x9c, 0xfe,
    0x35, 0x90, 0x30, 0x82, 0xd3, 0xe2, 0x9c, 0xaf, 0x2f, 0x22, 0x8f, 0x52, 0x62, 0xe2, 0xe2, 0x3e, 0x98, 0xf8, 0x04, 0xa8, 0x88, 0x3a, 0xa4, 0xf8, 0x04, 0xa8, 0x36, 0xa7, 0x88, 0x31, 0xaa, 0x8f, 0xfa, 0x0f, 0x52, 0x30, 0x94, 0x00, 0x00, 0x00,
    0x00, 0xd3, 0xdc, 0xfe, 0xfe, 0xfe, 0xfe, 0xae, 0xdc, 0x8e, 0xf1, 0x30, 0xb9, 0xd4, 0xaa, 0x0a, 0xaa, 0xf8, 0x05, 0xaf, 0x4a, 0x5d, 0x8d, 0xfc, 0x08, 0xad, 0x2f, 0x8f, 0x3a, 0xcc, 0x8d, 0xfc, 0xd9, 0xad, 0x30, 0xc5, 0xd3, 0x22, 0x06, 0x73,
    0x86, 0x73, 0x96, 0x52, 0xf8, 0x06, 0xae, 0xf8, 0xd8, 0xad, 0x02, 0xf6, 0xf6, 0xf6, 0xf6, 0xd5, 0x42, 0xfa, 0x0f, 0xd5, 0x8e, 0xf6, 0xae, 0x32, 0xdc, 0x3b, 0xea, 0x1d, 0x1d, 0x30, 0xea, 0x01
};
#endif

Chip8VIP::Chip8VIP(Chip8EmulatorHost& host, Chip8EmulatorOptions& options, IChip8Emulator* other)
    : Chip8OpcodeDisassembler(options)
    , _impl(new Private(host, *this))
{
    std::memcpy(_impl->_rom.data(), _rom_cvip, sizeof(_rom_cvip));
    _impl->_cpu.setInputHandler([this](uint8_t port) {
        if(port == 1)
            _impl->_displayEnabled = true;
        return 0;
    });
    _impl->_cpu.setOutputHandler([this](uint8_t port, uint8_t val) {
        switch (port) {
        case 1:
            _impl->_displayEnabled = false;
            break;
        case 2:
            _impl->_keyLatch = val & 0xf;
            break;
        default:
            break;
        }
    });
    _impl->_cpu.setNEFInputHandler([this](uint8_t idx) {
       switch(idx) {
           case 0: { // EF1 is set from four machine cycles before the video line to four before the end
               auto line = videoLine();
               return line < VIDEO_FIRST_VISIBLE_LINE - 4 || line >= VIDEO_FIRST_INVISIBLE_LINE - 4;
           }
           case 2: {
               return _impl->_host.isKeyDown(_impl->_keyLatch);
           }
           default:
               return true;
       }
    });
    Chip8VIP::reset();
    if(other) {
        std::memcpy(_impl->_ram.data() + 0x200, other->memory() + 0x200, std::min(_impl->_ram.size() - 0x200 - 0x170, (size_t)other->memSize()));
    }
}

Chip8VIP::~Chip8VIP()
{

}

void Chip8VIP::reset()
{
    std::memset(_impl->_ram.data(), 0, MAX_MEMORY_SIZE);
    std::memcpy(_impl->_ram.data(), _chip8_cvip, sizeof(_chip8_cvip));
    _impl->_cpu.reset();
    _impl->_cycles = 0;
    _impl->_frames = 0;
    _impl->_nextFrame = 0;
    _impl->_displayEnabled = false;
    //_impl->_nextFrame = _impl->_cpu.getCycles() + 3668 * 8;
    while(!executeCdp1802()); // fast-forward to fetch/decode loop
#if 0
    do {
        _impl->_cpu.executeInstruction();
        if(_impl->_cpu.getCycles() >= _impl->_nextFrame)
            _impl->_nextFrame += 3668 * 8;
        /*if(_impl->_cpu.PC() == 0x1B)
            std::clog << "CHIP8: " << dumpStateLine() << std::endl;*/
    }
    while(_impl->_cpu.PC() != 0x1B || getPC() != 0x200);
#endif
    //_impl->_nextFrame = _impl->_cpu.getCycles();
}

std::string Chip8VIP::name() const
{
    return "Chip-8-RVIP";
}

bool Chip8VIP::executeCdp1802()
{
    auto fc = frameCycle();
    if(_options.optTraceLog)
        Logger::log(Logger::eBACKEND_EMU, _impl->_cpu.getCycles(), frameCycle(), fmt::format("{:24} ; {}", _impl->_cpu.disassembleCurrentStatement(), _impl->_cpu.dumpStateLine()).c_str());
    _impl->_cpu.executeInstruction();
    if(frameCycle() < fc)
        _impl->_frames++;
    if(_impl->_cpu.PC() == 0x1B) {
        _impl->_rC8PC = _impl->_cpu.getR(5);
        if(_options.optTraceLog)
            Logger::log(Logger::eCHIP8, _impl->_cycles, frameCycle(), fmt::format("CHIP8: {}", dumpStateLine()).c_str());
        _impl->_cycles++;
        if (_impl->_execMode == eSTEP || (_impl->_execMode == eSTEPOVER && getSP() <= _impl->_stepOverSP)) {
            _impl->_execMode = ePAUSED;
        }
        if(hasBreakPoint(getPC())) {
            if(Chip8VIP::findBreakpoint(getPC()))
                _impl->_execMode = ePAUSED;
        }
        return true;
    }
    return false;
}

void Chip8VIP::executeInstruction()
{
    if (_impl->_execMode == ePAUSED || _impl->_cpuState == eERROR)
        return;
    //std::clog << "CHIP8: " << dumpStateLine() << std::endl;
    auto start = _impl->_cpu.getCycles();
    while(!executeCdp1802() || _impl->_cpu.getCycles() - start >= 3668*14);
#if 0
    do {
        _impl->_cpu.executeInstruction();
    }
    while(_impl->_cpu.PC() != 0x1B && _impl->_cpu.getCycles() < _impl->_nextFrame);
    if(_impl->_cpu.PC() == 0x1B) {
        _impl->_rC8PC = getPC();
        _impl->_cycles++;
        if (_impl->_execMode == eSTEP || (_impl->_execMode == eSTEPOVER && getSP() <= _impl->_stepOverSP)) {
            _impl->_execMode = ePAUSED;
        }
    }
    if(hasBreakPoint(_impl->_cpu.PC())) {
        if(Chip8VIP::findBreakpoint(_impl->_cpu.PC()))
            _impl->_execMode = ePAUSED;
    }
#endif
}

void Chip8VIP::executeInstructions(int numInstructions)
{
    for(int i = 0; i < numInstructions; ++i) {
        executeInstruction();
    }
}

//---------------------------------------------------------------------------
// For easier handling we shift the line/cycle counting to the start of the
// interrupt (if display is enabled)

inline int Chip8VIP::frameCycle() const
{
    return cdp1861::frameCycle(_impl->_cpu.getCycles()); // _impl->_irqStart ? ((_impl->_cpu.getCycles() >> 3) - _impl->_irqStart) : 0;
}

inline int Chip8VIP::videoLine() const
{
    return cdp1861::videoLine(_impl->_cpu.getCycles()); // (frameCycle() + (78*14)) % 3668) / 14;
}

void Chip8VIP::tick(int)
{
    if (_impl->_execMode == ePAUSED || _impl->_cpuState == eERROR)
        return;
    // execute 1 frame, 3668 machine cycles, or the rest of an incomplete frame if there is one
    //std::clog << "tick at line: " << videoLine() << ", fc: " << frameCycle() << ", cycle: " << _impl->_cpu.getCycles() << std::endl;
    auto nextFrame = cdp1861::nextFrame(_impl->_cpu.getCycles());
    auto pic = cdp1861::preIrqCycles(_impl->_cpu.getCycles());
    //if(pic)
    //    std::clog << "executing " << pic << " pre irq cycles" << std::endl;
    for(int64_t i = _impl->_cpu.getCycles() + pic*8; _impl->_cpu.getCycles() < i;)
        executeCdp1802();
    auto line = videoLine();
    if(line < 80+128) {
        while (line < 80+128) {
            //std::clog << "line: " << line << std::endl;
            if (_impl->_displayEnabled && _impl->_cpu.getIE() && cdp1861::interruptRequest(_impl->_cpu.getCycles())) {
                if(_options.optTraceLog)
                    Logger::log(Logger::eBACKEND_EMU, _impl->_cpu.getCycles(), frameCycle(), fmt::format("{:24} ; {}", "--- IRQ ---", _impl->_cpu.dumpStateLine()).c_str());
                _impl->_cpu.triggerInterrupt();
            }
            else {
                if (line >= VIDEO_FIRST_VISIBLE_LINE && line < VIDEO_FIRST_INVISIBLE_LINE) {
                    executeCdp1802();
                    auto dmaStart = _impl->_cpu.getR(0);
                    for (int i = 0; i < 8; ++i) {
                        uint8_t* dest = &_impl->_screenBuffer[(line - VIDEO_FIRST_VISIBLE_LINE) * 256 + i * 8];
                        auto data = _impl->_displayEnabled ? _impl->_cpu.executeDMAOut() : 0;
                        for (int j = 0; j < 8; ++j) {
                            dest[j] = (data >> (7 - j)) & 1;
                        }
                    }
                    if (_impl->_displayEnabled) {
                        if(_options.optTraceLog)
                            Logger::log(Logger::eBACKEND_EMU, _impl->_cpu.getCycles(), frameCycle(), fmt::format("DMA: line {:03d} 0x{:04x}-0x{:04x}", line, dmaStart, _impl->_cpu.getR(0) - 1).c_str());
                    }
                    else {
                        executeCdp1802();
                        executeCdp1802();
                        executeCdp1802();
                        executeCdp1802();
                    }
                    executeCdp1802();
                    executeCdp1802();
                }
                else {
                    executeCdp1802();
                }
            }
            line = videoLine();
        }
    }
    else {
        while (videoLine()) {
            executeCdp1802();
        }
    }
}

bool Chip8VIP::isDisplayEnabled() const
{
    return _impl->_displayEnabled;
}

uint8_t Chip8VIP::getV(uint8_t index) const
{
    return _impl->_ram[0xef0 + (index&0xf)];
}

uint32_t Chip8VIP::getPC() const
{
    return _impl->_rC8PC;
}

uint32_t Chip8VIP::getI() const
{
    return _impl->_cpu.getR(0xa);
}

uint8_t Chip8VIP::getSP() const
{
    return (0xecf - _impl->_cpu.getR(2)) >> 1;
}

uint8_t Chip8VIP::stackSize() const
{
    return 12;
}

const uint16_t* Chip8VIP::getStackElements() const
{
    static uint16_t dummy[16];
    for(int i = 0; i < stackSize(); ++i) {
        dummy[i] = (_impl->_ram[0xecd - i*2] << 8) | _impl->_ram[0xecf - i*2 - 1];
    }
    return dummy;
}

uint8_t* Chip8VIP::memory()
{
    return _impl->_ram.data();
}

uint8_t* Chip8VIP::memoryCopy()
{
    return _impl->_ram_b.data();
}

int Chip8VIP::memSize() const
{
    return 4096;
}

void Chip8VIP::copyState()
{
    std::memcpy(_impl->_rV_b.data(), _impl->_ram.data() + 0xef0, sizeof(uint8_t)*16);
    std::memcpy(_impl->_stack_b.data(), getStackElements(), sizeof(uint16_t)*stackSize());
    std::memcpy(_impl->_ram_b.data(), _impl->_ram.data(), _impl->_ram_b.size());
    _impl->_rSP_b = getSP();
    _impl->_rDT_b = delayTimer();
    _impl->_rST_b = soundTimer();
    _impl->_rI_b = getI();
}

uint8_t Chip8VIP::getCopyV(uint8_t index) const
{
    return _impl->_rV_b[index];
}

uint32_t Chip8VIP::getCopyI() const
{
    return _impl->_rI_b;
}

uint8_t Chip8VIP::getCopyDT() const
{
    return _impl->_rDT_b;
}

uint8_t Chip8VIP::getCopyST() const
{
    return _impl->_rST_b;
}

uint8_t Chip8VIP::getCopySP() const
{
    return _impl->_rSP_b;
}

const uint16_t* Chip8VIP::getCopyStackElements() const
{
    return _impl->_stack_b.data();
}

int64_t Chip8VIP::cycles() const
{
    return _impl->_cycles;
}

int64_t Chip8VIP::frames() const
{
    return _impl->_frames;
}

uint8_t Chip8VIP::delayTimer() const
{
    return _impl->_cpu.getR(8) >> 8;
}

uint8_t Chip8VIP::soundTimer() const
{
    return _impl->_cpu.getR(8) & 0xff;
}

float Chip8VIP::getAudioPhase() const
{
    return _impl->_wavePhase;
}

void Chip8VIP::setAudioPhase(float phase)
{
    _impl->_wavePhase = phase;
}

std::string Chip8VIP::dumpStateLine() const
{
    uint16_t op = (readByte(getPC())<<8)|readByte(getPC() + 1);
    return fmt::format("V0:{:02x} V1:{:02x} V2:{:02x} V3:{:02x} V4:{:02x} V5:{:02x} V6:{:02x} V7:{:02x} V8:{:02x} V9:{:02x} VA:{:02x} VB:{:02x} VC:{:02x} VD:{:02x} VE:{:02x} VF:{:02x} I:{:04x} SP:{:1x} PC:{:04x} O:{:04x}", getV(0), getV(1), getV(2),
                       getV(3), getV(4), getV(5), getV(6), getV(7), getV(8), getV(9), getV(10), getV(11), getV(12), getV(13), getV(14), getV(15), getI(), getSP(), getPC(), op, readByteDMA(getV(2)), readByteDMA(getV(2)+1));
}

void Chip8VIP::setExecMode(ExecMode mode)
{
    _impl->_execMode = mode;
    if(mode == eSTEPOVER)
        _impl->_stepOverSP = getSP();
}

IChip8Emulator::ExecMode Chip8VIP::execMode() const
{
    return _impl->_execMode;
}

IChip8Emulator::CpuState Chip8VIP::cpuState() const
{
    return _impl->_cpuState;
}

uint16_t Chip8VIP::getCurrentScreenWidth() const
{
    return 64;
}

uint16_t Chip8VIP::getCurrentScreenHeight() const
{
    return 128;
}

uint16_t Chip8VIP::getMaxScreenWidth() const
{
    return 64;
}

uint16_t Chip8VIP::getMaxScreenHeight() const
{
    return 128;
}

const uint8_t* Chip8VIP::getScreenBuffer() const
{
    /*static uint8_t screenBuffer[256*192];
    for(int i = 0; i < 8*32; ++i) {
        auto data = _impl->_ram[0xf00 + i];
        for(int j = 0; j < 8; ++j) {
            screenBuffer[(i>>3)*256 + (i&7)*8 + j] = (data >> (7-j)) & 1;
        }
    }*/
    return _impl->_screenBuffer.data();
}

Cdp1802& Chip8VIP::backendCPU()
{
    return _impl->_cpu;
}

uint8_t Chip8VIP::readByte(uint16_t addr) const
{
    if(addr < 0x1000)
        return _impl->_ram[addr];
    if(addr >= 0x8000 && addr < 0x8200)
        return _impl->_rom[addr & 0x1ff];
    _impl->_execMode = ePAUSED;
    _impl->_cpuState = eERROR;
    return 0;
}

uint8_t Chip8VIP::readByteDMA(uint16_t addr) const
{
    if(addr < 0x1000)
        return _impl->_ram[addr];
    if(addr >= 0x8000 && addr < 0x8200)
        return _impl->_rom[addr & 0x1ff];
    return 0;
}

void Chip8VIP::writeByte(uint16_t addr, uint8_t val)
{
    if(addr < 0x1000)
        _impl->_ram[addr] = val;
    else {
        _impl->_execMode = ePAUSED;
        _impl->_cpuState = eERROR;
    }
}

void Chip8VIP::setBreakpoint(uint32_t address, const BreakpointInfo& bpi)
{
    _impl->_breakpoints[address] = bpi;
    _impl->_breakMap[address & 0xFFF] = 1;
}

void Chip8VIP::removeBreakpoint(uint32_t address)
{
    _impl->_breakpoints.erase(address);
    size_t count = 0;
    uint32_t masked = address & 0xFFF;
    for(const auto& [addr, bpi] : _impl->_breakpoints) {
        if((addr & 0xFFF) == masked) {
            _impl->_breakMap[masked] = 1;
            return;
        }
    }
    _impl->_breakMap[masked] = 0;
}

IChip8Emulator::BreakpointInfo* Chip8VIP::findBreakpoint(uint32_t address)
{
    if(_impl->_breakMap[address & 0xFFF]) {
        auto iter = _impl->_breakpoints.find(address);
        if(iter != _impl->_breakpoints.end())
            return &iter->second;
    }
    return nullptr;
}

size_t Chip8VIP::numBreakpoints() const
{
    return _impl->_breakpoints.size();
}

std::pair<uint32_t, IChip8Emulator::BreakpointInfo*> Chip8VIP::getNthBreakpoint(size_t index)
{
    size_t count = 0;
    for(auto& [addr, bpi] : _impl->_breakpoints) {
        if(count++ == index)
            return {addr, &bpi};
    }
    return {0, nullptr};
}

void Chip8VIP::removeAllBreakpoints()
{
    std::memset(_impl->_breakMap.data(), 0, 4096);
    _impl->_breakpoints.clear();
}

bool Chip8VIP::hasBreakPoint(uint32_t address) const
{
    return _impl->_breakMap[address&0xfff] != 0;
}

}
