//---------------------------------------------------------------------------------------
// AUTOGENERATED BY gen_saturn_decode.py
//---------------------------------------------------------------------------------------
#include "hpsaturnbase.hpp"
#include <fmt/format.h>
#include <cstring>
#include <charconv>
#include <iostream>

HpSaturnBase::HpSaturnBase()
: _ram(ADDRESS_SPACE/2, 0)
{
}

// add.a <x=nzconst(4)>,d0
void HpSaturnBase::opAdd_16x()
{
    auto x = readNibbles<1>();
}

// add.a <x=nzconst(4)>,d1
void HpSaturnBase::opAdd_17x()
{
    auto x = readNibbles<1>();
}

// add.a p+1,c
void HpSaturnBase::opAdd_809()
{
}

// add.a <i=nzconst(4)>,<x=reg>
void HpSaturnBase::opAdd_818fxi()
{
    auto x = readNibbles<1>();
    auto i = readNibbles<1>();
}

// add.<t=field> <i=nzconst(4)>,<x=reg>
void HpSaturnBase::opAdd_818txi()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
    auto i = readNibbles<1>();
}

// add.<k=field> <x=regpair12>
void HpSaturnBase::opAdd_akx()
{
    auto k = readNibbles<1>();
    auto x = readNibbles<1>();
}

// add.a <x=regpair12>
void HpSaturnBase::opAdd_cx()
{
    auto x = readNibbles<1>();
}

// and.a <y=regpair8>
void HpSaturnBase::opAnd_0exy()
{
    auto x = readNibbles<1>();
    auto y = readNibbles<1>();
}

// and.<x=field> <y=regpair8>
void HpSaturnBase::opAnd_0exy_2()
{
    auto x = readNibbles<1>();
    auto y = readNibbles<1>();
}

// brbc <x=const(4)>,a,<yy#pcofs(5)>
void HpSaturnBase::opBrbc_8086xyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brbc <x=const(4)>,c,<yy#pcofs(5)>
void HpSaturnBase::opBrbc_808axyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brbc <z=hwflags()>,<yy#pcofs(3)>
void HpSaturnBase::opBrbc_83zyy()
{
    auto z = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brbc <x=const(4)>,st,<yy#pcofs(3)>
void HpSaturnBase::opBrbc_86xyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brbs <x=const(4)>,a,<yy#pcofs(5)>
void HpSaturnBase::opBrbs_8087xyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brbs <x=const(4)>,c,<yy#pcofs(5)>
void HpSaturnBase::opBrbs_808bxyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brbs <x=const(4)>,st,<yy#pcofs(3)>
void HpSaturnBase::opBrbs_87xyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brcc <xx#pcofs(1)>
void HpSaturnBase::opBrcc_5xx()
{
    auto xx = readNibbles<2>();
}

// brcs <xx#pcofs(1)>
void HpSaturnBase::opBrcs_4xx()
{
    auto xx = readNibbles<2>();
}

// breq.1 p,<x=const(4)>,<yy#pcofs(3)>
void HpSaturnBase::opBreq_89xyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// breq.a <u=regpair4+0>,<yy#pcofs(3)>
void HpSaturnBase::opBreq_8auyy()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// breq.<t=field> <u=regpair4+0>,<yy#pcofs(3)>
void HpSaturnBase::opBreq_9tuyy()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brge.a <u=regpair4+8>,<yy#pcofs(3)>
void HpSaturnBase::opBrge_8buyy_3()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brge.<t=field+8> <u=regpair4+8>,<yy#pcofs(3)>
void HpSaturnBase::opBrge_9tuyy_7()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brgt.a <u=regpair4+0>,<yy#pcofs(3)>
void HpSaturnBase::opBrgt_8buyy()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brgt.<t=field+8> <u=regpair4+0>,<yy#pcofs(3)>
void HpSaturnBase::opBrgt_9tuyy_5()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brle.a <u=regpair4+12>,<yy#pcofs(3)>
void HpSaturnBase::opBrle_8buyy_4()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brle.<t=field+8> <u=regpair4+12>,<yy#pcofs(3)>
void HpSaturnBase::opBrle_9tuyy_8()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brlt.a <u=regpair4+4>,<yy#pcofs(3)>
void HpSaturnBase::opBrlt_8buyy_2()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brlt.<t=field+8> <u=regpair4+4>,<yy#pcofs(3)>
void HpSaturnBase::opBrlt_9tuyy_6()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brne.1 p,<x=const(4)>,<yy#pcofs(3)>
void HpSaturnBase::opBrne_88xyy()
{
    auto x = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brne.a <u=regpair4+4>,<yy#pcofs(3)>
void HpSaturnBase::opBrne_8auyy_2()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brne.<t=field> <u=regpair4+4>,<yy#pcofs(3)>
void HpSaturnBase::opBrne_9tuyy_2()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brnz.a <u=reg+12>,<yy#pcofs(3)>
void HpSaturnBase::opBrnz_8auyy_4()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brnz.<t=field> <u=reg+12>,<yy#pcofs(3)>
void HpSaturnBase::opBrnz_9tuyy_4()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brz.a <u=reg+8>,<yy#pcofs(3)>
void HpSaturnBase::opBrz_8auyy_3()
{
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// brz.<t=field> <u=reg+8>,<yy#pcofs(3)>
void HpSaturnBase::opBrz_9tuyy_3()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
    auto yy = readNibbles<2>();
}

// buscb
void HpSaturnBase::opBuscb_8083()
{
}

// buscc
void HpSaturnBase::opBuscc_80b()
{
}

// buscd
void HpSaturnBase::opBuscd_808d()
{
}

// call.3 <xxx#pcofs(4)>
void HpSaturnBase::opCall_7xxx()
{
    auto xxx = readNibbles<3>();
}

// call.4 <xxxx#pcofs(6)>
void HpSaturnBase::opCall_8exxxx()
{
    auto xxxx = readNibbles<4>();
}

// call.a <xxxxx=const(20)>
void HpSaturnBase::opCall_8fxxxxx()
{
    auto xxxxx = readNibbles<5>();
}

// clr.x st
void HpSaturnBase::opClr_08()
{
}

// clr.<p=field+8> <t=reg>
void HpSaturnBase::opClr_apt()
{
    auto p = readNibbles<1>();
    auto t = readNibbles<1>();
}

// clr.a <t=reg>
void HpSaturnBase::opClr_dt()
{
    auto t = readNibbles<1>();
}

// clrb <x=const(4)>,a
void HpSaturnBase::opClrb_8084x()
{
    auto x = readNibbles<1>();
}

// clrb <x=const(4)>,c
void HpSaturnBase::opClrb_8088x()
{
    auto x = readNibbles<1>();
}

// clrb <x=hwflags()>
void HpSaturnBase::opClrb_82x()
{
    auto x = readNibbles<1>();
}

// clrb <x=const(4)>,st
void HpSaturnBase::opClrb_84x()
{
    auto x = readNibbles<1>();
}

// config
void HpSaturnBase::opConfig_805()
{
}

// dec.1 p
void HpSaturnBase::opDec_0d()
{
}

// dec.1 p
void HpSaturnBase::opDec_0d_2()
{
}

// dec.<k=field> <u=reg+12>
void HpSaturnBase::opDec_aku()
{
    auto k = readNibbles<1>();
    auto u = readNibbles<1>();
}

// dec.<k=field> <w=reg+12>
void HpSaturnBase::opDec_akw()
{
    auto k = readNibbles<1>();
    auto w = readNibbles<1>();
}

// dec.a <u=reg+12>
void HpSaturnBase::opDec_cu()
{
    auto u = readNibbles<1>();
}

// dec.a <w=reg+12>
void HpSaturnBase::opDec_cw()
{
    auto w = readNibbles<1>();
}

// in.4 a
void HpSaturnBase::opIn_802()
{
}

// in.4 c
void HpSaturnBase::opIn_803()
{
}

// inc.1 p
void HpSaturnBase::opInc_0c()
{
}

// inc.<k=field> <u=reg+4>
void HpSaturnBase::opInc_bku()
{
    auto k = readNibbles<1>();
    auto u = readNibbles<1>();
}

// inc.a <u=reg+4>
void HpSaturnBase::opInc_eu()
{
    auto u = readNibbles<1>();
}

// intoff
void HpSaturnBase::opIntoff_808f()
{
}

// inton
void HpSaturnBase::opInton_8080()
{
}

// jump.3 <xxx#pcofs(1)>
void HpSaturnBase::opJump_6xxx()
{
    auto xxx = readNibbles<3>();
}

// jump.a @a
void HpSaturnBase::opJump_808c()
{
}

// jump.a @c
void HpSaturnBase::opJump_808e()
{
}

// jump.a a
void HpSaturnBase::opJump_81b2()
{
}

// jump.a c
void HpSaturnBase::opJump_81b3()
{
}

// jump.4 <xxxx#pcofs(2)>
void HpSaturnBase::opJump_8cxxxx()
{
    auto xxxx = readNibbles<4>();
}

// jump.a <xxxxx=const(20)>
void HpSaturnBase::opJump_8dxxxxx()
{
    auto xxxxx = readNibbles<5>();
}

// move.x st,c
void HpSaturnBase::opMove_09()
{
}

// move.x c,st
void HpSaturnBase::opMove_0a()
{
}

// move.w a,<x=tempreg+0>
void HpSaturnBase::opMove_10x()
{
    auto x = readNibbles<1>();
}

// move.w c,<x=tempreg+8>
void HpSaturnBase::opMove_10x_2()
{
    auto x = readNibbles<1>();
}

// move.w <x=tempreg+0>,a
void HpSaturnBase::opMove_11x()
{
    auto x = readNibbles<1>();
}

// move.w <x=tempreg+8>,c
void HpSaturnBase::opMove_11x_2()
{
    auto x = readNibbles<1>();
}

// move.a <x=daregpair+0>
void HpSaturnBase::opMove_13x()
{
    auto x = readNibbles<1>();
}

// move.4 <x=daregpair+8>
void HpSaturnBase::opMove_13x_2()
{
    auto x = readNibbles<1>();
}

// move.a <x=mrpair+0>
void HpSaturnBase::opMove_14x()
{
    auto x = readNibbles<1>();
}

// move.b <x=mrpair+8>
void HpSaturnBase::opMove_14x_2()
{
    auto x = readNibbles<1>();
}

// move.<i=nzconst(4)> <x=mrpair+8>
void HpSaturnBase::opMove_15xi()
{
    auto x = readNibbles<1>();
    auto i = readNibbles<1>();
}

// move.<t=field> <x=mrpair+0>
void HpSaturnBase::opMove_15xt()
{
    auto x = readNibbles<1>();
    auto t = readNibbles<1>();
}

// move.2 <xx=const(8)>,d0
void HpSaturnBase::opMove_19xx()
{
    auto xx = readNibbles<2>();
}

// move.4 <xxxx=const(16)>,d0
void HpSaturnBase::opMove_1axxxx()
{
    auto xxxx = readNibbles<4>();
}

// move.5 <xxxxx=const(20)>,d0
void HpSaturnBase::opMove_1bxxxxx()
{
    auto xxxxx = readNibbles<5>();
}

// move.2 <xx=const(8)>,d1
void HpSaturnBase::opMove_1dxx()
{
    auto xx = readNibbles<2>();
}

// move.4 <xxxx=const(16)>,d1
void HpSaturnBase::opMove_1exxxx()
{
    auto xxxx = readNibbles<4>();
}

// move.5 <xxxxx=const(20)>,d1
void HpSaturnBase::opMove_1fxxxxx()
{
    auto xxxxx = readNibbles<5>();
}

// move.1 <x=const(4)>,p
void HpSaturnBase::opMove_2x()
{
    auto x = readNibbles<1>();
}

// move <x=const(4)>,p
void HpSaturnBase::opMove_2x_2()
{
    auto x = readNibbles<1>();
}

// move.p1 <x=const(4)>,c
void HpSaturnBase::opMove_30x()
{
    auto x = readNibbles<1>();
}

// move.p2 <xx=const(8)>,c
void HpSaturnBase::opMove_31xx()
{
    auto xx = readNibbles<2>();
}

// move.p3 <xxx=const(12)>,c
void HpSaturnBase::opMove_32xxx()
{
    auto xxx = readNibbles<3>();
}

// move.p4 <xxxx=const(16)>,c
void HpSaturnBase::opMove_33xxxx()
{
    auto xxxx = readNibbles<4>();
}

// move.p5 <xxxxx=const(20)>,c
void HpSaturnBase::opMove_34xxxxx()
{
    auto xxxxx = readNibbles<5>();
}

// move.p6 <xxxxxx=const(24)>,c
void HpSaturnBase::opMove_35xxxxxx()
{
    auto xxxxxx = readNibbles<6>();
}

// move.p7 <xxxxxxx=const(28)>,c
void HpSaturnBase::opMove_36xxxxxxx()
{
    auto xxxxxxx = readNibbles<7>();
}

// move.p8 <xxxxxxxx=const(32)>,c
void HpSaturnBase::opMove_37xxxxxxxx()
{
    auto xxxxxxxx = readNibbles<8>();
}

// move.p9 <xxxxxxxxx=const(36)>,c
void HpSaturnBase::opMove_38xxxxxxxxx()
{
    auto xxxxxxxxx = readNibbles<9>();
}

// move.p10 <xxxxxxxxxx=const(40)>,c
void HpSaturnBase::opMove_39xxxxxxxxxx()
{
    auto xxxxxxxxxx = readNibbles<10>();
}

// move.p11 <xxxxxxxxxxx=const(44)>,c
void HpSaturnBase::opMove_3axxxxxxxxxxx()
{
    auto xxxxxxxxxxx = readNibbles<11>();
}

// move.p12 <xxxxxxxxxxxx=const(48)>,c
void HpSaturnBase::opMove_3bxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxx = readNibbles<12>();
}

// move.p13 <xxxxxxxxxxxxx=const(52)>,c
void HpSaturnBase::opMove_3cxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxx = readNibbles<13>();
}

// move.p14 <xxxxxxxxxxxxxx=const(56)>,c
void HpSaturnBase::opMove_3dxxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxxx = readNibbles<14>();
}

// move.p15 <xxxxxxxxxxxxxxx=const(60)>,c
void HpSaturnBase::opMove_3exxxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxxxx = readNibbles<15>();
}

// move.p16 <xxxxxxxxxxxxxxxx=const(64)>,c
void HpSaturnBase::opMove_3fxxxxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxxxxx = readNibbles<16>();
}

// move.a id,c
void HpSaturnBase::opMove_806()
{
}

// move.p1 <x=const(4)>,a
void HpSaturnBase::opMove_80820x()
{
    auto x = readNibbles<1>();
}

// move.p2 <xx=const(8)>,a
void HpSaturnBase::opMove_80821xx()
{
    auto xx = readNibbles<2>();
}

// move.p3 <xxx=const(12)>,a
void HpSaturnBase::opMove_80822xxx()
{
    auto xxx = readNibbles<3>();
}

// move.p4 <xxxx=const(16)>,a
void HpSaturnBase::opMove_80823xxxx()
{
    auto xxxx = readNibbles<4>();
}

// move.p5 <xxxxx=const(20)>,a
void HpSaturnBase::opMove_80824xxxxx()
{
    auto xxxxx = readNibbles<5>();
}

// move.p6 <xxxxxx=const(24)>,a
void HpSaturnBase::opMove_80825xxxxxx()
{
    auto xxxxxx = readNibbles<6>();
}

// move.p7 <xxxxxxx=const(28)>,a
void HpSaturnBase::opMove_80826xxxxxxx()
{
    auto xxxxxxx = readNibbles<7>();
}

// move.p8 <xxxxxxxx=const(32)>,a
void HpSaturnBase::opMove_80827xxxxxxxx()
{
    auto xxxxxxxx = readNibbles<8>();
}

// move.p9 <xxxxxxxxx=const(36)>,a
void HpSaturnBase::opMove_80828xxxxxxxxx()
{
    auto xxxxxxxxx = readNibbles<9>();
}

// move.p10 <xxxxxxxxxx=const(40)>,a
void HpSaturnBase::opMove_80829xxxxxxxxxx()
{
    auto xxxxxxxxxx = readNibbles<10>();
}

// move.p11 <xxxxxxxxxxx=const(44)>,a
void HpSaturnBase::opMove_8082axxxxxxxxxxx()
{
    auto xxxxxxxxxxx = readNibbles<11>();
}

// move.p12 <xxxxxxxxxxxx=const(48)>,a
void HpSaturnBase::opMove_8082bxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxx = readNibbles<12>();
}

// move.p13 <xxxxxxxxxxxxx=const(52)>,a
void HpSaturnBase::opMove_8082cxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxx = readNibbles<13>();
}

// move.p14 <xxxxxxxxxxxxxx=const(56)>,a
void HpSaturnBase::opMove_8082dxxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxxx = readNibbles<14>();
}

// move.p15 <xxxxxxxxxxxxxxx=const(60)>,a
void HpSaturnBase::opMove_8082exxxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxxxx = readNibbles<15>();
}

// move.p16 <xxxxxxxxxxxxxxxx=const(64)>,a
void HpSaturnBase::opMove_8082fxxxxxxxxxxxxxxxx()
{
    auto xxxxxxxxxxxxxxxx = readNibbles<16>();
}

// move.a @a,pc
void HpSaturnBase::opMove_808c_2()
{
}

// move.a @c,pc
void HpSaturnBase::opMove_808e_2()
{
}

// move.1 p,c,<x=const(4)>
void HpSaturnBase::opMove_80cx()
{
    auto x = readNibbles<1>();
}

// move.1 c,<x=const(4)>,p
void HpSaturnBase::opMove_80dx()
{
    auto x = readNibbles<1>();
}

// move.a a,<x=tempreg+0>
void HpSaturnBase::opMove_81af0x()
{
    auto x = readNibbles<1>();
}

// move.a c,<x=tempreg+8>
void HpSaturnBase::opMove_81af0x_2()
{
    auto x = readNibbles<1>();
}

// move.a <x=tempreg+0>,a
void HpSaturnBase::opMove_81af1x()
{
    auto x = readNibbles<1>();
}

// move.a <x=tempreg+8>,c
void HpSaturnBase::opMove_81af1x_2()
{
    auto x = readNibbles<1>();
}

// move.<t=field> a,<x=tempreg+0>
void HpSaturnBase::opMove_81at0x()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// move.<t=field> c,<x=tempreg+8>
void HpSaturnBase::opMove_81at0x_2()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// move.<t=field> <x=tempreg+0>,a
void HpSaturnBase::opMove_81at1x()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// move.<t=field> <x=tempreg+8>,c
void HpSaturnBase::opMove_81at1x_2()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// move.a a,pc
void HpSaturnBase::opMove_81b2_2()
{
}

// move.a c,pc
void HpSaturnBase::opMove_81b3_2()
{
}

// move.a pc,a
void HpSaturnBase::opMove_81b4()
{
}

// move.a pc,c
void HpSaturnBase::opMove_81b5()
{
}

// move.<p=field+8> <z=regpair8+4>
void HpSaturnBase::opMove_apz()
{
    auto p = readNibbles<1>();
    auto z = readNibbles<1>();
}

// move.a <z=regpair8+4>
void HpSaturnBase::opMove_dz()
{
    auto z = readNibbles<1>();
}

// neg.<r=field+8> <v=reg+8>
void HpSaturnBase::opNeg_brv()
{
    auto r = readNibbles<1>();
    auto v = readNibbles<1>();
}

// neg.a <v=reg+8>
void HpSaturnBase::opNeg_fv()
{
    auto v = readNibbles<1>();
}

// nop3
void HpSaturnBase::opNop3_420()
{
}

// nop4
void HpSaturnBase::opNop4_6300()
{
}

// nop5
void HpSaturnBase::opNop5_64000()
{
}

// not.<r=field+8> <v=reg+12>
void HpSaturnBase::opNot_brv_2()
{
    auto r = readNibbles<1>();
    auto v = readNibbles<1>();
}

// not.a <v=reg+12>
void HpSaturnBase::opNot_fv_2()
{
    auto v = readNibbles<1>();
}

// or.a <y=regpair8+8>
void HpSaturnBase::opOr_0exy_3()
{
    auto x = readNibbles<1>();
    auto y = readNibbles<1>();
}

// or.<x=field> <y=regpair8+8>
void HpSaturnBase::opOr_0exy_4()
{
    auto x = readNibbles<1>();
    auto y = readNibbles<1>();
}

// out.s c
void HpSaturnBase::opOut_800()
{
}

// out.x c
void HpSaturnBase::opOut_801()
{
}

// pop.a c
void HpSaturnBase::opPop_07()
{
}

// push.a c
void HpSaturnBase::opPush_06()
{
}

// reset
void HpSaturnBase::opReset_80a()
{
}

// ret
void HpSaturnBase::opRet_01()
{
}

// retbc <x=const(4)>,a
void HpSaturnBase::opRetbc_8086x00()
{
    auto x = readNibbles<1>();
}

// retbc <x=const(4)>,c
void HpSaturnBase::opRetbc_808ax00()
{
    auto x = readNibbles<1>();
}

// retbc <z=hwflags()>
void HpSaturnBase::opRetbc_83z00()
{
    auto z = readNibbles<1>();
}

// retbc <x=const(4)>,st
void HpSaturnBase::opRetbc_86x00()
{
    auto x = readNibbles<1>();
}

// retbs <x=const(4)>,a
void HpSaturnBase::opRetbs_8087x00()
{
    auto x = readNibbles<1>();
}

// retbs <x=const(4)>,c
void HpSaturnBase::opRetbs_808bx00()
{
    auto x = readNibbles<1>();
}

// retbs <x=const(4)>,st
void HpSaturnBase::opRetbs_87x00()
{
    auto x = readNibbles<1>();
}

// retcc
void HpSaturnBase::opRetcc_500()
{
}

// retclrc
void HpSaturnBase::opRetclrc_03()
{
}

// retcs
void HpSaturnBase::opRetcs_400()
{
}

// reteq.1 p,<x=const(4)>
void HpSaturnBase::opReteq_89x00()
{
    auto x = readNibbles<1>();
}

// reteq.a <u=regpair4+0>
void HpSaturnBase::opReteq_8au00()
{
    auto u = readNibbles<1>();
}

// reteq.<t=field> <u=regpair4+0>
void HpSaturnBase::opReteq_9tu00()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// retge.a <u=regpair4+8>
void HpSaturnBase::opRetge_8bu00_3()
{
    auto u = readNibbles<1>();
}

// retge.<t=field+8> <u=regpair4+8>
void HpSaturnBase::opRetge_9tu00_7()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// retgt.a <u=regpair4+0>
void HpSaturnBase::opRetgt_8bu00()
{
    auto u = readNibbles<1>();
}

// retgt.<t=field+8> <u=regpair4+0>
void HpSaturnBase::opRetgt_9tu00_5()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// reti
void HpSaturnBase::opReti_0f()
{
}

// retle.a <u=regpair4+12>
void HpSaturnBase::opRetle_8bu00_4()
{
    auto u = readNibbles<1>();
}

// retle.<t=field+8> <u=regpair4+12>
void HpSaturnBase::opRetle_9tu00_8()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// retlt.a <u=regpair4+4>
void HpSaturnBase::opRetlt_8bu00_2()
{
    auto u = readNibbles<1>();
}

// retlt.<t=field+8> <u=regpair4+4>
void HpSaturnBase::opRetlt_9tu00_6()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// retne.1 p,<x=const(4)>
void HpSaturnBase::opRetne_88x00()
{
    auto x = readNibbles<1>();
}

// retne.a <u=regpair4+4>
void HpSaturnBase::opRetne_8au00_2()
{
    auto u = readNibbles<1>();
}

// retne.<t=field> <u=regpair4+4>
void HpSaturnBase::opRetne_9tu00_2()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// retnz.a <u=reg+12>
void HpSaturnBase::opRetnz_8au00_4()
{
    auto u = readNibbles<1>();
}

// retnz.<t=field> <u=reg+12>
void HpSaturnBase::opRetnz_9tu00_4()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// retsetc
void HpSaturnBase::opRetsetc_02()
{
}

// retsetxm
void HpSaturnBase::opRetsetxm_00()
{
}

// retsxm
void HpSaturnBase::opRetsxm_00_2()
{
}

// retz.a <u=reg+8>
void HpSaturnBase::opRetz_8au00_3()
{
    auto u = readNibbles<1>();
}

// retz.<t=field> <u=reg+8>
void HpSaturnBase::opRetz_9tu00_3()
{
    auto t = readNibbles<1>();
    auto u = readNibbles<1>();
}

// rln.w <x=reg+0>
void HpSaturnBase::opRln_81x()
{
    auto x = readNibbles<1>();
}

// rrn.w <x=reg+4>
void HpSaturnBase::opRrn_81x_2()
{
    auto x = readNibbles<1>();
}

// rsi
void HpSaturnBase::opRsi_80810()
{
}

// setb <x=const(4)>,a
void HpSaturnBase::opSetb_8085x()
{
    auto x = readNibbles<1>();
}

// setb <x=const(4)>,c
void HpSaturnBase::opSetb_8089x()
{
    auto x = readNibbles<1>();
}

// setb <x=const(4)>,st
void HpSaturnBase::opSetb_85x()
{
    auto x = readNibbles<1>();
}

// setdec
void HpSaturnBase::opSetdec_05()
{
}

// sethex
void HpSaturnBase::opSethex_04()
{
}

// shutdn
void HpSaturnBase::opShutdn_807()
{
}

// sln.<r=field+8> <w=reg>
void HpSaturnBase::opSln_brw()
{
    auto r = readNibbles<1>();
    auto w = readNibbles<1>();
}

// sln.a <w=reg>
void HpSaturnBase::opSln_fw()
{
    auto w = readNibbles<1>();
}

// srb.<r=a> <w=reg>
void HpSaturnBase::opSrb_819rw()
{
    auto r = readNibbles<1>();
    auto w = readNibbles<1>();
}

// srb.<r=field> <w=reg>
void HpSaturnBase::opSrb_819rw_2()
{
    auto r = readNibbles<1>();
    auto w = readNibbles<1>();
}

// srb.w <w=reg+12>
void HpSaturnBase::opSrb_81w()
{
    auto w = readNibbles<1>();
}

// sreq
void HpSaturnBase::opSreq_80e()
{
}

// srn.<r=field+8> <w=reg+4>
void HpSaturnBase::opSrn_brw_2()
{
    auto r = readNibbles<1>();
    auto w = readNibbles<1>();
}

// srn.a <w=reg+4>
void HpSaturnBase::opSrn_fw_2()
{
    auto w = readNibbles<1>();
}

// sub.a <x=nzconst(4)>,d0
void HpSaturnBase::opSub_18x()
{
    auto x = readNibbles<1>();
}

// sub.a <x=nzconst(4)>,d1
void HpSaturnBase::opSub_1cx()
{
    auto x = readNibbles<1>();
}

// sub.<r=a> <i=nzconst(4)>,<x=reg+8>
void HpSaturnBase::opSub_818txi_2()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
    auto i = readNibbles<1>();
}

// sub.<t=field> <i=nzconst(4)>,<x=reg+8>
void HpSaturnBase::opSub_818txi_3()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
    auto i = readNibbles<1>();
}

// sub.<t=field> <y=regpair8split>
void HpSaturnBase::opSub_bty()
{
    auto t = readNibbles<1>();
    auto y = readNibbles<1>();
}

// sub.a <y=regpair8split>
void HpSaturnBase::opSub_ey()
{
    auto y = readNibbles<1>();
}

// subn.<t=field> <y=regpair4rev+12>
void HpSaturnBase::opSubn_bty_2()
{
    auto t = readNibbles<1>();
    auto y = readNibbles<1>();
}

// subn.a <y=regpair4rev+12>
void HpSaturnBase::opSubn_ey_2()
{
    auto y = readNibbles<1>();
}

// swap.x c,st
void HpSaturnBase::opSwap_0b()
{
}

// swap.x st,c
void HpSaturnBase::opSwap_0b_2()
{
}

// swap.w a,<x=tempreg+0>
void HpSaturnBase::opSwap_12x()
{
    auto x = readNibbles<1>();
}

// swap.w <x=tempreg+0>,a
void HpSaturnBase::opSwap_12x_2()
{
    auto x = readNibbles<1>();
}

// swap.w c,<x=tempreg+8>
void HpSaturnBase::opSwap_12x_3()
{
    auto x = readNibbles<1>();
}

// swap.w <x=tempreg+8>,c
void HpSaturnBase::opSwap_12x_4()
{
    auto x = readNibbles<1>();
}

// swap.a <x=daregpair+2>
void HpSaturnBase::opSwap_13x_3()
{
    auto x = readNibbles<1>();
}

// swap.a <x=daregpairrev+2>
void HpSaturnBase::opSwap_13x_4()
{
    auto x = readNibbles<1>();
}

// swap.4 <x=daregpair+10>
void HpSaturnBase::opSwap_13x_5()
{
    auto x = readNibbles<1>();
}

// swap.4 <x=daregpairrev+10>
void HpSaturnBase::opSwap_13x_6()
{
    auto x = readNibbles<1>();
}

// swap.1 p,c,<x=const(4)>
void HpSaturnBase::opSwap_80fx()
{
    auto x = readNibbles<1>();
}

// swap.1 c,p,<x=const(4)>
void HpSaturnBase::opSwap_80fx_2()
{
    auto x = readNibbles<1>();
}

// swap.a a,<x=tempreg+0>
void HpSaturnBase::opSwap_81af2x()
{
    auto x = readNibbles<1>();
}

// swap.a <x=tempreg+0>,a
void HpSaturnBase::opSwap_81af2x_2()
{
    auto x = readNibbles<1>();
}

// swap.a c,<x=tempreg+8>
void HpSaturnBase::opSwap_81af2x_3()
{
    auto x = readNibbles<1>();
}

// swap.a <x=tempreg+8>,c
void HpSaturnBase::opSwap_81af2x_4()
{
    auto x = readNibbles<1>();
}

// swap.<t=field> a,<x=tempreg+0>
void HpSaturnBase::opSwap_81at2x()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// swap.<t=field> c,<x=tempreg+8>
void HpSaturnBase::opSwap_81at2x_2()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// swap.<t=field> <x=tempreg+8>,c
void HpSaturnBase::opSwap_81at2x_3()
{
    auto t = readNibbles<1>();
    auto x = readNibbles<1>();
}

// swap.a a,pc
void HpSaturnBase::opSwap_81b6()
{
}

// swap.a pc,a
void HpSaturnBase::opSwap_81b6_2()
{
}

// swap.a c,pc
void HpSaturnBase::opSwap_81b7()
{
}

// swap.a pc,c
void HpSaturnBase::opSwap_81b7_2()
{
}

// swap.<p=field+8> <z=regpair4rev+12>
void HpSaturnBase::opSwap_apz_2()
{
    auto p = readNibbles<1>();
    auto z = readNibbles<1>();
}

// swap.<p=field+8> <z=regpair4+12>
void HpSaturnBase::opSwap_apz_3()
{
    auto p = readNibbles<1>();
    auto z = readNibbles<1>();
}

// swap.a <z=regpair4rev+12>
void HpSaturnBase::opSwap_dz_2()
{
    auto z = readNibbles<1>();
}

// swap.a <z=regpair4+12>
void HpSaturnBase::opSwap_dz_3()
{
    auto z = readNibbles<1>();
}

// uncnfg
void HpSaturnBase::opUncnfg_804()
{
}


struct OpcodeEntry {
    const char* opcode;
    const char* mnemonic;
    const OpcodeEntry* next;
    void (HpSaturnBase::*handler)();
};

static const OpcodeEntry conflict_table[92] = {
    { "81af0x", "move.a c,<x=tempreg+8>", nullptr, &HpSaturnBase::opMove_81af0x_2 },
    { "81af1x", "move.a <x=tempreg+8>,c", nullptr, &HpSaturnBase::opMove_81af1x_2 },
    { "81af2x", "swap.a <x=tempreg+0>,a", &conflict_table[3], &HpSaturnBase::opSwap_81af2x_2 },
    { "81af2x", "swap.a c,<x=tempreg+8>", &conflict_table[4], &HpSaturnBase::opSwap_81af2x_3 },
    { "81af2x", "swap.a <x=tempreg+8>,c", nullptr, &HpSaturnBase::opSwap_81af2x_4 },
    { "8086x00", "retbc <x=const(4)>,a", nullptr, &HpSaturnBase::opRetbc_8086x00 },
    { "8087x00", "retbs <x=const(4)>,a", nullptr, &HpSaturnBase::opRetbs_8087x00 },
    { "808ax00", "retbc <x=const(4)>,c", nullptr, &HpSaturnBase::opRetbc_808ax00 },
    { "808bx00", "retbs <x=const(4)>,c", nullptr, &HpSaturnBase::opRetbs_808bx00 },
    { "808c", "move.a @a,pc", nullptr, &HpSaturnBase::opMove_808c_2 },
    { "808e", "move.a @c,pc", nullptr, &HpSaturnBase::opMove_808e_2 },
    { "81b2", "move.a a,pc", nullptr, &HpSaturnBase::opMove_81b2_2 },
    { "81b3", "move.a c,pc", nullptr, &HpSaturnBase::opMove_81b3_2 },
    { "81b6", "swap.a pc,a", nullptr, &HpSaturnBase::opSwap_81b6_2 },
    { "81b7", "swap.a pc,c", nullptr, &HpSaturnBase::opSwap_81b7_2 },
    { "80fx", "swap.1 c,p,<x=const(4)>", nullptr, &HpSaturnBase::opSwap_80fx_2 },
    { "819rw", "srb.<r=field> <w=reg>", nullptr, &HpSaturnBase::opSrb_819rw_2 },
    { "83z00", "retbc <z=hwflags()>", nullptr, &HpSaturnBase::opRetbc_83z00 },
    { "86x00", "retbc <x=const(4)>,st", nullptr, &HpSaturnBase::opRetbc_86x00 },
    { "87x00", "retbs <x=const(4)>,st", nullptr, &HpSaturnBase::opRetbs_87x00 },
    { "88x00", "retne.1 p,<x=const(4)>", nullptr, &HpSaturnBase::opRetne_88x00 },
    { "89x00", "reteq.1 p,<x=const(4)>", nullptr, &HpSaturnBase::opReteq_89x00 },
    { "8auyy", "brne.a <u=regpair4+4>,<yy#pcofs(3)>", &conflict_table[23], &HpSaturnBase::opBrne_8auyy_2 },
    { "8auyy", "brz.a <u=reg+8>,<yy#pcofs(3)>", &conflict_table[24], &HpSaturnBase::opBrz_8auyy_3 },
    { "8auyy", "brnz.a <u=reg+12>,<yy#pcofs(3)>", &conflict_table[25], &HpSaturnBase::opBrnz_8auyy_4 },
    { "8au00", "reteq.a <u=regpair4+0>", &conflict_table[26], &HpSaturnBase::opReteq_8au00 },
    { "8au00", "retne.a <u=regpair4+4>", &conflict_table[27], &HpSaturnBase::opRetne_8au00_2 },
    { "8au00", "retz.a <u=reg+8>", &conflict_table[28], &HpSaturnBase::opRetz_8au00_3 },
    { "8au00", "retnz.a <u=reg+12>", nullptr, &HpSaturnBase::opRetnz_8au00_4 },
    { "8buyy", "brlt.a <u=regpair4+4>,<yy#pcofs(3)>", &conflict_table[30], &HpSaturnBase::opBrlt_8buyy_2 },
    { "8buyy", "brge.a <u=regpair4+8>,<yy#pcofs(3)>", &conflict_table[31], &HpSaturnBase::opBrge_8buyy_3 },
    { "8buyy", "brle.a <u=regpair4+12>,<yy#pcofs(3)>", &conflict_table[32], &HpSaturnBase::opBrle_8buyy_4 },
    { "8bu00", "retgt.a <u=regpair4+0>", &conflict_table[33], &HpSaturnBase::opRetgt_8bu00 },
    { "8bu00", "retlt.a <u=regpair4+4>", &conflict_table[34], &HpSaturnBase::opRetlt_8bu00_2 },
    { "8bu00", "retge.a <u=regpair4+8>", &conflict_table[35], &HpSaturnBase::opRetge_8bu00_3 },
    { "8bu00", "retle.a <u=regpair4+12>", nullptr, &HpSaturnBase::opRetle_8bu00_4 },
    { "10x", "move.w c,<x=tempreg+8>", nullptr, &HpSaturnBase::opMove_10x_2 },
    { "11x", "move.w <x=tempreg+8>,c", nullptr, &HpSaturnBase::opMove_11x_2 },
    { "12x", "swap.w <x=tempreg+0>,a", &conflict_table[39], &HpSaturnBase::opSwap_12x_2 },
    { "12x", "swap.w c,<x=tempreg+8>", &conflict_table[40], &HpSaturnBase::opSwap_12x_3 },
    { "12x", "swap.w <x=tempreg+8>,c", nullptr, &HpSaturnBase::opSwap_12x_4 },
    { "13x", "move.4 <x=daregpair+8>", &conflict_table[42], &HpSaturnBase::opMove_13x_2 },
    { "13x", "swap.a <x=daregpair+2>", &conflict_table[43], &HpSaturnBase::opSwap_13x_3 },
    { "13x", "swap.a <x=daregpairrev+2>", &conflict_table[44], &HpSaturnBase::opSwap_13x_4 },
    { "13x", "swap.4 <x=daregpair+10>", &conflict_table[45], &HpSaturnBase::opSwap_13x_5 },
    { "13x", "swap.4 <x=daregpairrev+10>", nullptr, &HpSaturnBase::opSwap_13x_6 },
    { "14x", "move.b <x=mrpair+8>", nullptr, &HpSaturnBase::opMove_14x_2 },
    { "15xi", "move.<i=nzconst(4)> <x=mrpair+8>", nullptr, &HpSaturnBase::opMove_15xi },
    { "00", "retsxm", nullptr, &HpSaturnBase::opRetsxm_00_2 },
    { "0b", "swap.x st,c", nullptr, &HpSaturnBase::opSwap_0b_2 },
    { "0d", "dec.1 p", nullptr, &HpSaturnBase::opDec_0d_2 },
    { "0exy", "and.<x=field> <y=regpair8>", &conflict_table[52], &HpSaturnBase::opAnd_0exy_2 },
    { "0exy", "or.a <y=regpair8+8>", &conflict_table[53], &HpSaturnBase::opOr_0exy_3 },
    { "0exy", "or.<x=field> <y=regpair8+8>", nullptr, &HpSaturnBase::opOr_0exy_4 },
    { "2x", "move <x=const(4)>,p", nullptr, &HpSaturnBase::opMove_2x_2 },
    { "9tuyy", "brne.<t=field> <u=regpair4+4>,<yy#pcofs(3)>", &conflict_table[56], &HpSaturnBase::opBrne_9tuyy_2 },
    { "9tuyy", "brz.<t=field> <u=reg+8>,<yy#pcofs(3)>", &conflict_table[57], &HpSaturnBase::opBrz_9tuyy_3 },
    { "9tuyy", "brnz.<t=field> <u=reg+12>,<yy#pcofs(3)>", &conflict_table[58], &HpSaturnBase::opBrnz_9tuyy_4 },
    { "9tuyy", "brgt.<t=field+8> <u=regpair4+0>,<yy#pcofs(3)>", &conflict_table[59], &HpSaturnBase::opBrgt_9tuyy_5 },
    { "9tuyy", "brlt.<t=field+8> <u=regpair4+4>,<yy#pcofs(3)>", &conflict_table[60], &HpSaturnBase::opBrlt_9tuyy_6 },
    { "9tuyy", "brge.<t=field+8> <u=regpair4+8>,<yy#pcofs(3)>", &conflict_table[61], &HpSaturnBase::opBrge_9tuyy_7 },
    { "9tuyy", "brle.<t=field+8> <u=regpair4+12>,<yy#pcofs(3)>", &conflict_table[62], &HpSaturnBase::opBrle_9tuyy_8 },
    { "9tu00", "reteq.<t=field> <u=regpair4+0>", &conflict_table[63], &HpSaturnBase::opReteq_9tu00 },
    { "9tu00", "retne.<t=field> <u=regpair4+4>", &conflict_table[64], &HpSaturnBase::opRetne_9tu00_2 },
    { "9tu00", "retz.<t=field> <u=reg+8>", &conflict_table[65], &HpSaturnBase::opRetz_9tu00_3 },
    { "9tu00", "retnz.<t=field> <u=reg+12>", &conflict_table[66], &HpSaturnBase::opRetnz_9tu00_4 },
    { "9tu00", "retgt.<t=field+8> <u=regpair4+0>", &conflict_table[67], &HpSaturnBase::opRetgt_9tu00_5 },
    { "9tu00", "retlt.<t=field+8> <u=regpair4+4>", &conflict_table[68], &HpSaturnBase::opRetlt_9tu00_6 },
    { "9tu00", "retge.<t=field+8> <u=regpair4+8>", &conflict_table[69], &HpSaturnBase::opRetge_9tu00_7 },
    { "9tu00", "retle.<t=field+8> <u=regpair4+12>", nullptr, &HpSaturnBase::opRetle_9tu00_8 },
    { "apt", "clr.<p=field+8> <t=reg>", &conflict_table[71], &HpSaturnBase::opClr_apt },
    { "akw", "dec.<k=field> <w=reg+12>", &conflict_table[72], &HpSaturnBase::opDec_akw },
    { "aku", "dec.<k=field> <u=reg+12>", &conflict_table[73], &HpSaturnBase::opDec_aku },
    { "apz", "move.<p=field+8> <z=regpair8+4>", &conflict_table[74], &HpSaturnBase::opMove_apz },
    { "apz", "swap.<p=field+8> <z=regpair4rev+12>", &conflict_table[75], &HpSaturnBase::opSwap_apz_2 },
    { "apz", "swap.<p=field+8> <z=regpair4+12>", nullptr, &HpSaturnBase::opSwap_apz_3 },
    { "brv", "neg.<r=field+8> <v=reg+8>", &conflict_table[77], &HpSaturnBase::opNeg_brv },
    { "brv", "not.<r=field+8> <v=reg+12>", &conflict_table[78], &HpSaturnBase::opNot_brv_2 },
    { "brw", "sln.<r=field+8> <w=reg>", &conflict_table[79], &HpSaturnBase::opSln_brw },
    { "brw", "srn.<r=field+8> <w=reg+4>", &conflict_table[80], &HpSaturnBase::opSrn_brw_2 },
    { "bty", "sub.<t=field> <y=regpair8split>", &conflict_table[81], &HpSaturnBase::opSub_bty },
    { "bty", "subn.<t=field> <y=regpair4rev+12>", nullptr, &HpSaturnBase::opSubn_bty_2 },
    { "cw", "dec.a <w=reg+12>", &conflict_table[83], &HpSaturnBase::opDec_cw },
    { "cu", "dec.a <u=reg+12>", nullptr, &HpSaturnBase::opDec_cu },
    { "dz", "move.a <z=regpair8+4>", &conflict_table[85], &HpSaturnBase::opMove_dz },
    { "dz", "swap.a <z=regpair4rev+12>", &conflict_table[86], &HpSaturnBase::opSwap_dz_2 },
    { "dz", "swap.a <z=regpair4+12>", nullptr, &HpSaturnBase::opSwap_dz_3 },
    { "ey", "sub.a <y=regpair8split>", &conflict_table[88], &HpSaturnBase::opSub_ey },
    { "ey", "subn.a <y=regpair4rev+12>", nullptr, &HpSaturnBase::opSubn_ey_2 },
    { "fv", "not.a <v=reg+12>", &conflict_table[90], &HpSaturnBase::opNot_fv_2 },
    { "fw", "sln.a <w=reg>", &conflict_table[91], &HpSaturnBase::opSln_fw },
    { "fw", "srn.a <w=reg+4>", nullptr, &HpSaturnBase::opSrn_fw_2 },
};

static const OpcodeEntry table_8081[16] = {
    { "80810", "rsi", nullptr, &HpSaturnBase::opRsi_80810 },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
};

static const OpcodeEntry table_81af[16] = {
    { "81af0x", "move.a a,<x=tempreg+0>", &conflict_table[0], &HpSaturnBase::opMove_81af0x }, // [('81af0x', 'move', 'move.a c,<x=tempreg+8>', 'opMove_81af0x_2')]
    { "81af1x", "move.a <x=tempreg+0>,a", &conflict_table[1], &HpSaturnBase::opMove_81af1x }, // [('81af1x', 'move', 'move.a <x=tempreg+8>,c', 'opMove_81af1x_2')]
    { "81af2x", "swap.a a,<x=tempreg+0>", &conflict_table[2], &HpSaturnBase::opSwap_81af2x }, // [('81af2x', 'swap', 'swap.a <x=tempreg+0>,a', 'opSwap_81af2x_2'), ('81af2x', 'swap', 'swap.a c,<x=tempreg+8>', 'opSwap_81af2x_3'), ('81af2x', 'swap', 'swap.a <x=tempreg+8>,c', 'opSwap_81af2x_4')]
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
};

static const OpcodeEntry table_8082[16] = {
    { "80820x", "move.p1 <x=const(4)>,a", nullptr, &HpSaturnBase::opMove_80820x },
    { "80821xx", "move.p2 <xx=const(8)>,a", nullptr, &HpSaturnBase::opMove_80821xx },
    { "80822xxx", "move.p3 <xxx=const(12)>,a", nullptr, &HpSaturnBase::opMove_80822xxx },
    { "80823xxxx", "move.p4 <xxxx=const(16)>,a", nullptr, &HpSaturnBase::opMove_80823xxxx },
    { "80824xxxxx", "move.p5 <xxxxx=const(20)>,a", nullptr, &HpSaturnBase::opMove_80824xxxxx },
    { "80825xxxxxx", "move.p6 <xxxxxx=const(24)>,a", nullptr, &HpSaturnBase::opMove_80825xxxxxx },
    { "80826xxxxxxx", "move.p7 <xxxxxxx=const(28)>,a", nullptr, &HpSaturnBase::opMove_80826xxxxxxx },
    { "80827xxxxxxxx", "move.p8 <xxxxxxxx=const(32)>,a", nullptr, &HpSaturnBase::opMove_80827xxxxxxxx },
    { "80828xxxxxxxxx", "move.p9 <xxxxxxxxx=const(36)>,a", nullptr, &HpSaturnBase::opMove_80828xxxxxxxxx },
    { "80829xxxxxxxxxx", "move.p10 <xxxxxxxxxx=const(40)>,a", nullptr, &HpSaturnBase::opMove_80829xxxxxxxxxx },
    { "8082axxxxxxxxxxx", "move.p11 <xxxxxxxxxxx=const(44)>,a", nullptr, &HpSaturnBase::opMove_8082axxxxxxxxxxx },
    { "8082bxxxxxxxxxxxx", "move.p12 <xxxxxxxxxxxx=const(48)>,a", nullptr, &HpSaturnBase::opMove_8082bxxxxxxxxxxxx },
    { "8082cxxxxxxxxxxxxx", "move.p13 <xxxxxxxxxxxxx=const(52)>,a", nullptr, &HpSaturnBase::opMove_8082cxxxxxxxxxxxxx },
    { "8082dxxxxxxxxxxxxxx", "move.p14 <xxxxxxxxxxxxxx=const(56)>,a", nullptr, &HpSaturnBase::opMove_8082dxxxxxxxxxxxxxx },
    { "8082exxxxxxxxxxxxxxx", "move.p15 <xxxxxxxxxxxxxxx=const(60)>,a", nullptr, &HpSaturnBase::opMove_8082exxxxxxxxxxxxxxx },
    { "8082fxxxxxxxxxxxxxxxx", "move.p16 <xxxxxxxxxxxxxxxx=const(64)>,a", nullptr, &HpSaturnBase::opMove_8082fxxxxxxxxxxxxxxxx },
};

static const OpcodeEntry table_818[16] = {
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { "818fxi", "add.a <i=nzconst(4)>,<x=reg>", nullptr, &HpSaturnBase::opAdd_818fxi },
};

static const OpcodeEntry table_808[16] = {
    { "8080", "inton", nullptr, &HpSaturnBase::opInton_8080 },
    { nullptr, nullptr, table_8081, nullptr },
    { nullptr, nullptr, table_8082, nullptr },
    { "8083", "buscb", nullptr, &HpSaturnBase::opBuscb_8083 },
    { "8084x", "clrb <x=const(4)>,a", nullptr, &HpSaturnBase::opClrb_8084x },
    { "8085x", "setb <x=const(4)>,a", nullptr, &HpSaturnBase::opSetb_8085x },
    { "8086xyy", "brbc <x=const(4)>,a,<yy#pcofs(5)>", &conflict_table[5], &HpSaturnBase::opBrbc_8086xyy }, // [('8086x00', 'retbc', 'retbc <x=const(4)>,a', 'opRetbc_8086x00')]
    { "8087xyy", "brbs <x=const(4)>,a,<yy#pcofs(5)>", &conflict_table[6], &HpSaturnBase::opBrbs_8087xyy }, // [('8087x00', 'retbs', 'retbs <x=const(4)>,a', 'opRetbs_8087x00')]
    { "8088x", "clrb <x=const(4)>,c", nullptr, &HpSaturnBase::opClrb_8088x },
    { "8089x", "setb <x=const(4)>,c", nullptr, &HpSaturnBase::opSetb_8089x },
    { "808axyy", "brbc <x=const(4)>,c,<yy#pcofs(5)>", &conflict_table[7], &HpSaturnBase::opBrbc_808axyy }, // [('808ax00', 'retbc', 'retbc <x=const(4)>,c', 'opRetbc_808ax00')]
    { "808bxyy", "brbs <x=const(4)>,c,<yy#pcofs(5)>", &conflict_table[8], &HpSaturnBase::opBrbs_808bxyy }, // [('808bx00', 'retbs', 'retbs <x=const(4)>,c', 'opRetbs_808bx00')]
    { "808c", "jump.a @a", &conflict_table[9], &HpSaturnBase::opJump_808c }, // [('808c', 'move', 'move.a @a,pc', 'opMove_808c_2')]
    { "808d", "buscd", nullptr, &HpSaturnBase::opBuscd_808d },
    { "808e", "jump.a @c", &conflict_table[10], &HpSaturnBase::opJump_808e }, // [('808e', 'move', 'move.a @c,pc', 'opMove_808e_2')]
    { "808f", "intoff", nullptr, &HpSaturnBase::opIntoff_808f },
};

static const OpcodeEntry table_81b[16] = {
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { "81b2", "jump.a a", &conflict_table[11], &HpSaturnBase::opJump_81b2 }, // [('81b2', 'move', 'move.a a,pc', 'opMove_81b2_2')]
    { "81b3", "jump.a c", &conflict_table[12], &HpSaturnBase::opJump_81b3 }, // [('81b3', 'move', 'move.a c,pc', 'opMove_81b3_2')]
    { "81b4", "move.a pc,a", nullptr, &HpSaturnBase::opMove_81b4 },
    { "81b5", "move.a pc,c", nullptr, &HpSaturnBase::opMove_81b5 },
    { "81b6", "swap.a a,pc", &conflict_table[13], &HpSaturnBase::opSwap_81b6 }, // [('81b6', 'swap', 'swap.a pc,a', 'opSwap_81b6_2')]
    { "81b7", "swap.a c,pc", &conflict_table[14], &HpSaturnBase::opSwap_81b7 }, // [('81b7', 'swap', 'swap.a pc,c', 'opSwap_81b7_2')]
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
};

static const OpcodeEntry table_81a[16] = {
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, table_81af, nullptr },
};

static const OpcodeEntry table_80[16] = {
    { "800", "out.s c", nullptr, &HpSaturnBase::opOut_800 },
    { "801", "out.x c", nullptr, &HpSaturnBase::opOut_801 },
    { "802", "in.4 a", nullptr, &HpSaturnBase::opIn_802 },
    { "803", "in.4 c", nullptr, &HpSaturnBase::opIn_803 },
    { "804", "uncnfg", nullptr, &HpSaturnBase::opUncnfg_804 },
    { "805", "config", nullptr, &HpSaturnBase::opConfig_805 },
    { "806", "move.a id,c", nullptr, &HpSaturnBase::opMove_806 },
    { "807", "shutdn", nullptr, &HpSaturnBase::opShutdn_807 },
    { nullptr, nullptr, table_808, nullptr },
    { "809", "add.a p+1,c", nullptr, &HpSaturnBase::opAdd_809 },
    { "80a", "reset", nullptr, &HpSaturnBase::opReset_80a },
    { "80b", "buscc", nullptr, &HpSaturnBase::opBuscc_80b },
    { "80cx", "move.1 p,c,<x=const(4)>", nullptr, &HpSaturnBase::opMove_80cx },
    { "80dx", "move.1 c,<x=const(4)>,p", nullptr, &HpSaturnBase::opMove_80dx },
    { "80e", "sreq", nullptr, &HpSaturnBase::opSreq_80e },
    { "80fx", "swap.1 p,c,<x=const(4)>", &conflict_table[15], &HpSaturnBase::opSwap_80fx }, // [('80fx', 'swap', 'swap.1 c,p,<x=const(4)>', 'opSwap_80fx_2')]
};

static const OpcodeEntry table_81[16] = {
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, table_818, nullptr },
    { "819rw", "srb.<r=a> <w=reg>", &conflict_table[16], &HpSaturnBase::opSrb_819rw }, // [('819rw', 'srb', 'srb.<r=field> <w=reg>', 'opSrb_819rw_2')]
    { nullptr, nullptr, table_81a, nullptr },
    { nullptr, nullptr, table_81b, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
    { nullptr, nullptr, nullptr, nullptr },
};

static const OpcodeEntry table_8[16] = {
    { nullptr, nullptr, table_80, nullptr },
    { nullptr, nullptr, table_81, nullptr },
    { "82x", "clrb <x=hwflags()>", nullptr, &HpSaturnBase::opClrb_82x },
    { "83zyy", "brbc <z=hwflags()>,<yy#pcofs(3)>", &conflict_table[17], &HpSaturnBase::opBrbc_83zyy }, // [('83z00', 'retbc', 'retbc <z=hwflags()>', 'opRetbc_83z00')]
    { "84x", "clrb <x=const(4)>,st", nullptr, &HpSaturnBase::opClrb_84x },
    { "85x", "setb <x=const(4)>,st", nullptr, &HpSaturnBase::opSetb_85x },
    { "86xyy", "brbc <x=const(4)>,st,<yy#pcofs(3)>", &conflict_table[18], &HpSaturnBase::opBrbc_86xyy }, // [('86x00', 'retbc', 'retbc <x=const(4)>,st', 'opRetbc_86x00')]
    { "87xyy", "brbs <x=const(4)>,st,<yy#pcofs(3)>", &conflict_table[19], &HpSaturnBase::opBrbs_87xyy }, // [('87x00', 'retbs', 'retbs <x=const(4)>,st', 'opRetbs_87x00')]
    { "88xyy", "brne.1 p,<x=const(4)>,<yy#pcofs(3)>", &conflict_table[20], &HpSaturnBase::opBrne_88xyy }, // [('88x00', 'retne', 'retne.1 p,<x=const(4)>', 'opRetne_88x00')]
    { "89xyy", "breq.1 p,<x=const(4)>,<yy#pcofs(3)>", &conflict_table[21], &HpSaturnBase::opBreq_89xyy }, // [('89x00', 'reteq', 'reteq.1 p,<x=const(4)>', 'opReteq_89x00')]
    { "8auyy", "breq.a <u=regpair4+0>,<yy#pcofs(3)>", &conflict_table[22], &HpSaturnBase::opBreq_8auyy }, // [('8auyy', 'brne', 'brne.a <u=regpair4+4>,<yy#pcofs(3)>', 'opBrne_8auyy_2'), ('8auyy', 'brz', 'brz.a <u=reg+8>,<yy#pcofs(3)>', 'opBrz_8auyy_3'), ('8auyy', 'brnz', 'brnz.a <u=reg+12>,<yy#pcofs(3)>', 'opBrnz_8auyy_4'), ('8au00', 'reteq', 'reteq.a <u=regpair4+0>', 'opReteq_8au00'), ('8au00', 'retne', 'retne.a <u=regpair4+4>', 'opRetne_8au00_2'), ('8au00', 'retz', 'retz.a <u=reg+8>', 'opRetz_8au00_3'), ('8au00', 'retnz', 'retnz.a <u=reg+12>', 'opRetnz_8au00_4')]
    { "8buyy", "brgt.a <u=regpair4+0>,<yy#pcofs(3)>", &conflict_table[29], &HpSaturnBase::opBrgt_8buyy }, // [('8buyy', 'brlt', 'brlt.a <u=regpair4+4>,<yy#pcofs(3)>', 'opBrlt_8buyy_2'), ('8buyy', 'brge', 'brge.a <u=regpair4+8>,<yy#pcofs(3)>', 'opBrge_8buyy_3'), ('8buyy', 'brle', 'brle.a <u=regpair4+12>,<yy#pcofs(3)>', 'opBrle_8buyy_4'), ('8bu00', 'retgt', 'retgt.a <u=regpair4+0>', 'opRetgt_8bu00'), ('8bu00', 'retlt', 'retlt.a <u=regpair4+4>', 'opRetlt_8bu00_2'), ('8bu00', 'retge', 'retge.a <u=regpair4+8>', 'opRetge_8bu00_3'), ('8bu00', 'retle', 'retle.a <u=regpair4+12>', 'opRetle_8bu00_4')]
    { "8cxxxx", "jump.4 <xxxx#pcofs(2)>", nullptr, &HpSaturnBase::opJump_8cxxxx },
    { "8dxxxxx", "jump.a <xxxxx=const(20)>", nullptr, &HpSaturnBase::opJump_8dxxxxx },
    { "8exxxx", "call.4 <xxxx#pcofs(6)>", nullptr, &HpSaturnBase::opCall_8exxxx },
    { "8fxxxxx", "call.a <xxxxx=const(20)>", nullptr, &HpSaturnBase::opCall_8fxxxxx },
};

static const OpcodeEntry table_1[16] = {
    { "10x", "move.w a,<x=tempreg+0>", &conflict_table[36], &HpSaturnBase::opMove_10x }, // [('10x', 'move', 'move.w c,<x=tempreg+8>', 'opMove_10x_2')]
    { "11x", "move.w <x=tempreg+0>,a", &conflict_table[37], &HpSaturnBase::opMove_11x }, // [('11x', 'move', 'move.w <x=tempreg+8>,c', 'opMove_11x_2')]
    { "12x", "swap.w a,<x=tempreg+0>", &conflict_table[38], &HpSaturnBase::opSwap_12x }, // [('12x', 'swap', 'swap.w <x=tempreg+0>,a', 'opSwap_12x_2'), ('12x', 'swap', 'swap.w c,<x=tempreg+8>', 'opSwap_12x_3'), ('12x', 'swap', 'swap.w <x=tempreg+8>,c', 'opSwap_12x_4')]
    { "13x", "move.a <x=daregpair+0>", &conflict_table[41], &HpSaturnBase::opMove_13x }, // [('13x', 'move', 'move.4 <x=daregpair+8>', 'opMove_13x_2'), ('13x', 'swap', 'swap.a <x=daregpair+2>', 'opSwap_13x_3'), ('13x', 'swap', 'swap.a <x=daregpairrev+2>', 'opSwap_13x_4'), ('13x', 'swap', 'swap.4 <x=daregpair+10>', 'opSwap_13x_5'), ('13x', 'swap', 'swap.4 <x=daregpairrev+10>', 'opSwap_13x_6')]
    { "14x", "move.a <x=mrpair+0>", &conflict_table[46], &HpSaturnBase::opMove_14x }, // [('14x', 'move', 'move.b <x=mrpair+8>', 'opMove_14x_2')]
    { "15xt", "move.<t=field> <x=mrpair+0>", &conflict_table[47], &HpSaturnBase::opMove_15xt }, // [('15xi', 'move', 'move.<i=nzconst(4)> <x=mrpair+8>', 'opMove_15xi')]
    { "16x", "add.a <x=nzconst(4)>,d0", nullptr, &HpSaturnBase::opAdd_16x },
    { "17x", "add.a <x=nzconst(4)>,d1", nullptr, &HpSaturnBase::opAdd_17x },
    { "18x", "sub.a <x=nzconst(4)>,d0", nullptr, &HpSaturnBase::opSub_18x },
    { "19xx", "move.2 <xx=const(8)>,d0", nullptr, &HpSaturnBase::opMove_19xx },
    { "1axxxx", "move.4 <xxxx=const(16)>,d0", nullptr, &HpSaturnBase::opMove_1axxxx },
    { "1bxxxxx", "move.5 <xxxxx=const(20)>,d0", nullptr, &HpSaturnBase::opMove_1bxxxxx },
    { "1cx", "sub.a <x=nzconst(4)>,d1", nullptr, &HpSaturnBase::opSub_1cx },
    { "1dxx", "move.2 <xx=const(8)>,d1", nullptr, &HpSaturnBase::opMove_1dxx },
    { "1exxxx", "move.4 <xxxx=const(16)>,d1", nullptr, &HpSaturnBase::opMove_1exxxx },
    { "1fxxxxx", "move.5 <xxxxx=const(20)>,d1", nullptr, &HpSaturnBase::opMove_1fxxxxx },
};

static const OpcodeEntry table_0[16] = {
    { "00", "retsetxm", &conflict_table[48], &HpSaturnBase::opRetsetxm_00 }, // [('00', 'retsxm', 'retsxm', 'opRetsxm_00_2')]
    { "01", "ret", nullptr, &HpSaturnBase::opRet_01 },
    { "02", "retsetc", nullptr, &HpSaturnBase::opRetsetc_02 },
    { "03", "retclrc", nullptr, &HpSaturnBase::opRetclrc_03 },
    { "04", "sethex", nullptr, &HpSaturnBase::opSethex_04 },
    { "05", "setdec", nullptr, &HpSaturnBase::opSetdec_05 },
    { "06", "push.a c", nullptr, &HpSaturnBase::opPush_06 },
    { "07", "pop.a c", nullptr, &HpSaturnBase::opPop_07 },
    { "08", "clr.x st", nullptr, &HpSaturnBase::opClr_08 },
    { "09", "move.x st,c", nullptr, &HpSaturnBase::opMove_09 },
    { "0a", "move.x c,st", nullptr, &HpSaturnBase::opMove_0a },
    { "0b", "swap.x c,st", &conflict_table[49], &HpSaturnBase::opSwap_0b }, // [('0b', 'swap', 'swap.x st,c', 'opSwap_0b_2')]
    { "0c", "inc.1 p", nullptr, &HpSaturnBase::opInc_0c },
    { "0d", "dec.1 p", &conflict_table[50], &HpSaturnBase::opDec_0d }, // [('0d', 'dec', 'dec.1 p', 'opDec_0d_2')]
    { "0exy", "and.a <y=regpair8>", &conflict_table[51], &HpSaturnBase::opAnd_0exy }, // [('0exy', 'and', 'and.<x=field> <y=regpair8>', 'opAnd_0exy_2'), ('0exy', 'or', 'or.a <y=regpair8+8>', 'opOr_0exy_3'), ('0exy', 'or', 'or.<x=field> <y=regpair8+8>', 'opOr_0exy_4')]
    { "0f", "reti", nullptr, &HpSaturnBase::opReti_0f },
};

static const OpcodeEntry table_3[16] = {
    { "30x", "move.p1 <x=const(4)>,c", nullptr, &HpSaturnBase::opMove_30x },
    { "31xx", "move.p2 <xx=const(8)>,c", nullptr, &HpSaturnBase::opMove_31xx },
    { "32xxx", "move.p3 <xxx=const(12)>,c", nullptr, &HpSaturnBase::opMove_32xxx },
    { "33xxxx", "move.p4 <xxxx=const(16)>,c", nullptr, &HpSaturnBase::opMove_33xxxx },
    { "34xxxxx", "move.p5 <xxxxx=const(20)>,c", nullptr, &HpSaturnBase::opMove_34xxxxx },
    { "35xxxxxx", "move.p6 <xxxxxx=const(24)>,c", nullptr, &HpSaturnBase::opMove_35xxxxxx },
    { "36xxxxxxx", "move.p7 <xxxxxxx=const(28)>,c", nullptr, &HpSaturnBase::opMove_36xxxxxxx },
    { "37xxxxxxxx", "move.p8 <xxxxxxxx=const(32)>,c", nullptr, &HpSaturnBase::opMove_37xxxxxxxx },
    { "38xxxxxxxxx", "move.p9 <xxxxxxxxx=const(36)>,c", nullptr, &HpSaturnBase::opMove_38xxxxxxxxx },
    { "39xxxxxxxxxx", "move.p10 <xxxxxxxxxx=const(40)>,c", nullptr, &HpSaturnBase::opMove_39xxxxxxxxxx },
    { "3axxxxxxxxxxx", "move.p11 <xxxxxxxxxxx=const(44)>,c", nullptr, &HpSaturnBase::opMove_3axxxxxxxxxxx },
    { "3bxxxxxxxxxxxx", "move.p12 <xxxxxxxxxxxx=const(48)>,c", nullptr, &HpSaturnBase::opMove_3bxxxxxxxxxxxx },
    { "3cxxxxxxxxxxxxx", "move.p13 <xxxxxxxxxxxxx=const(52)>,c", nullptr, &HpSaturnBase::opMove_3cxxxxxxxxxxxxx },
    { "3dxxxxxxxxxxxxxx", "move.p14 <xxxxxxxxxxxxxx=const(56)>,c", nullptr, &HpSaturnBase::opMove_3dxxxxxxxxxxxxxx },
    { "3exxxxxxxxxxxxxxx", "move.p15 <xxxxxxxxxxxxxxx=const(60)>,c", nullptr, &HpSaturnBase::opMove_3exxxxxxxxxxxxxxx },
    { "3fxxxxxxxxxxxxxxxx", "move.p16 <xxxxxxxxxxxxxxxx=const(64)>,c", nullptr, &HpSaturnBase::opMove_3fxxxxxxxxxxxxxxxx },
};


static const OpcodeEntry root_table[16] = {
    { nullptr, nullptr, table_0, nullptr },
    { nullptr, nullptr, table_1, nullptr },
    { "2x", "move.1 <x=const(4)>,p", &conflict_table[54], &HpSaturnBase::opMove_2x }, // [('2x', 'move', 'move <x=const(4)>,p', 'opMove_2x_2')]
    { nullptr, nullptr, table_3, nullptr },
    { "4xx", "brcs <xx#pcofs(1)>", nullptr, &HpSaturnBase::opBrcs_4xx },
    { "5xx", "brcc <xx#pcofs(1)>", nullptr, &HpSaturnBase::opBrcc_5xx },
    { "6xxx", "jump.3 <xxx#pcofs(1)>", nullptr, &HpSaturnBase::opJump_6xxx },
    { "7xxx", "call.3 <xxx#pcofs(4)>", nullptr, &HpSaturnBase::opCall_7xxx },
    { nullptr, nullptr, table_8, nullptr },
    { "9tuyy", "breq.<t=field> <u=regpair4+0>,<yy#pcofs(3)>", &conflict_table[55], &HpSaturnBase::opBreq_9tuyy }, // [('9tuyy', 'brne', 'brne.<t=field> <u=regpair4+4>,<yy#pcofs(3)>', 'opBrne_9tuyy_2'), ('9tuyy', 'brz', 'brz.<t=field> <u=reg+8>,<yy#pcofs(3)>', 'opBrz_9tuyy_3'), ('9tuyy', 'brnz', 'brnz.<t=field> <u=reg+12>,<yy#pcofs(3)>', 'opBrnz_9tuyy_4'), ('9tuyy', 'brgt', 'brgt.<t=field+8> <u=regpair4+0>,<yy#pcofs(3)>', 'opBrgt_9tuyy_5'), ('9tuyy', 'brlt', 'brlt.<t=field+8> <u=regpair4+4>,<yy#pcofs(3)>', 'opBrlt_9tuyy_6'), ('9tuyy', 'brge', 'brge.<t=field+8> <u=regpair4+8>,<yy#pcofs(3)>', 'opBrge_9tuyy_7'), ('9tuyy', 'brle', 'brle.<t=field+8> <u=regpair4+12>,<yy#pcofs(3)>', 'opBrle_9tuyy_8'), ('9tu00', 'reteq', 'reteq.<t=field> <u=regpair4+0>', 'opReteq_9tu00'), ('9tu00', 'retne', 'retne.<t=field> <u=regpair4+4>', 'opRetne_9tu00_2'), ('9tu00', 'retz', 'retz.<t=field> <u=reg+8>', 'opRetz_9tu00_3'), ('9tu00', 'retnz', 'retnz.<t=field> <u=reg+12>', 'opRetnz_9tu00_4'), ('9tu00', 'retgt', 'retgt.<t=field+8> <u=regpair4+0>', 'opRetgt_9tu00_5'), ('9tu00', 'retlt', 'retlt.<t=field+8> <u=regpair4+4>', 'opRetlt_9tu00_6'), ('9tu00', 'retge', 'retge.<t=field+8> <u=regpair4+8>', 'opRetge_9tu00_7'), ('9tu00', 'retle', 'retle.<t=field+8> <u=regpair4+12>', 'opRetle_9tu00_8')]
    { "akx", "add.<k=field> <x=regpair12>", &conflict_table[70], &HpSaturnBase::opAdd_akx }, // [('apt', 'clr', 'clr.<p=field+8> <t=reg>', 'opClr_apt'), ('akw', 'dec', 'dec.<k=field> <w=reg+12>', 'opDec_akw'), ('aku', 'dec', 'dec.<k=field> <u=reg+12>', 'opDec_aku'), ('apz', 'move', 'move.<p=field+8> <z=regpair8+4>', 'opMove_apz'), ('apz', 'swap', 'swap.<p=field+8> <z=regpair4rev+12>', 'opSwap_apz_2'), ('apz', 'swap', 'swap.<p=field+8> <z=regpair4+12>', 'opSwap_apz_3')]
    { "bku", "inc.<k=field> <u=reg+4>", &conflict_table[76], &HpSaturnBase::opInc_bku }, // [('brv', 'neg', 'neg.<r=field+8> <v=reg+8>', 'opNeg_brv'), ('brv', 'not', 'not.<r=field+8> <v=reg+12>', 'opNot_brv_2'), ('brw', 'sln', 'sln.<r=field+8> <w=reg>', 'opSln_brw'), ('brw', 'srn', 'srn.<r=field+8> <w=reg+4>', 'opSrn_brw_2'), ('bty', 'sub', 'sub.<t=field> <y=regpair8split>', 'opSub_bty'), ('bty', 'subn', 'subn.<t=field> <y=regpair4rev+12>', 'opSubn_bty_2')]
    { "cx", "add.a <x=regpair12>", &conflict_table[82], &HpSaturnBase::opAdd_cx }, // [('cw', 'dec', 'dec.a <w=reg+12>', 'opDec_cw'), ('cu', 'dec', 'dec.a <u=reg+12>', 'opDec_cu')]
    { "dt", "clr.a <t=reg>", &conflict_table[84], &HpSaturnBase::opClr_dt }, // [('dz', 'move', 'move.a <z=regpair8+4>', 'opMove_dz'), ('dz', 'swap', 'swap.a <z=regpair4rev+12>', 'opSwap_dz_2'), ('dz', 'swap', 'swap.a <z=regpair4+12>', 'opSwap_dz_3')]
    { "eu", "inc.a <u=reg+4>", &conflict_table[87], &HpSaturnBase::opInc_eu }, // [('ey', 'sub', 'sub.a <y=regpair8split>', 'opSub_ey'), ('ey', 'subn', 'subn.a <y=regpair4rev+12>', 'opSubn_ey_2')]
    { "fv", "neg.a <v=reg+8>", &conflict_table[89], &HpSaturnBase::opNeg_fv }, // [('fv', 'not', 'not.a <v=reg+12>', 'opNot_fv_2'), ('fw', 'sln', 'sln.a <w=reg>', 'opSln_fw'), ('fw', 'srn', 'srn.a <w=reg+4>', 'opSrn_fw_2')]
};

const char* operandField[8] = {"p", "wp", "xs", "x", "s", "m", "b", "w"};

const char* operandRegpair4[4] = {"a,b", "b,c", "c,a", "d,c"};

const char* operandRegpair4rev[4] = {"b,a", "c,b", "a,c", "c,d"};

const char* operandRegpair8[8] = {"b,a", "c,b", "a,c", "c,d", "a,b", "b,c", "c,a", "d,c"};

const char* operandRegpair8split[8] = {"b,a", "c,b", "a,c", "c,d", "a,b", "b,c", "c,a", "d,c"};

const char* operandRegpair12[12] = {"b,a", "c,b", "a,c", "c,d", "a,a", "b,b", "c,c", "d,d", "a,b", "b,c", "c,a", "d,c"};

const char* operandReg[4] = {"a", "b", "c", "d"};

const char* operandMrpair[8] = {"a,@d0", "a,@d1", "@d0,a", "@d1,a", "c,@d0", "c,@d1", "@d0,c", "@d1,c"};

const char* operandDaregpair[4] = {"a,d0", "a,d1", "c,d0", "c,d1"};

const char* operandDaregpairrev[4] = {"d0,a", "d1,a", "d0,c", "d1,c"};

const char* operandTempreg[5] = {"r0", "r1", "r2", "r3", "r4"};

void HpSaturnBase::handleOpcode()
{
    const OpcodeEntry* current = &root_table[readNibbles<1>()];
    while (current != nullptr) {
        if (current->handler != nullptr) {
            (this->*current->handler)();
            return;
        }
        if (current->next == nullptr) {
            std::cerr << "Error: Invalid opcode" << std::endl;
            return;
        }
        current = &current->next[readNibbles<1>()];
    }
    std::cerr << "Error: Invalid opcode" << std::endl;
}

class Operands
{
public:
    Operands(const HpSaturnBase& saturn, const std::string_view opcodePattern, uint32_t& address)
    {
        constexpr char hexDigits[] = "0123456789abcdef";
        auto outIter = operands.begin();
        auto iter = opcodePattern.begin();
        while (iter != opcodePattern.end() && std::isxdigit(*iter))
            ++iter;
        while (iter != opcodePattern.end()) {
            auto iter2 = iter;
            while (iter2 != opcodePattern.end() && *iter == *iter2) {
                ++iter2;
            }
            const auto size = static_cast<int>(iter2 - iter);
            uint64_t operand = 0;
            for (size_t i = 0; i < size; ++i) {
                const auto nibble = saturn.readNibble(address++);
                operand |= nibble << (i*4);
                hexOperands += hexDigits[nibble];
            }
            *outIter++ = {std::string_view(iter, size), operand};
            numberOfOperands++;
            iter = iter2;
        }
        while (outIter != operands.end()) {
            *outIter++ = {"",0};
        }
    }
    uint64_t getOperand(const std::string_view name) const
    {
        for (const auto& [opName, operand] : operands) {
            if (opName == name) {
                return operand;
            }
        }
        return 0;
    }
    static int64_t twosComplement(const uint64_t value, const unsigned bitSize)
    {
        if (value & (1ULL << (bitSize - 1))) {
            // If sign bit is set, calculate the two's complement negative value
            return static_cast<int64_t>(value) - (1LL << bitSize);
        } else {
            // If sign bit is not set, just return the value as is
            return static_cast<int64_t>(value);
        }
    }

    std::string formatOperands(const std::string_view disassembly, uint32_t pc) const
    {
        std::string result;
        auto iter = disassembly.begin();
        while (iter != disassembly.end()) {
            if (*iter != '<') {
                if (*iter == ' ') {
                    ++iter;
                    while (result.size() < 8)
                        result += " ";
                }
                else
                    result += *iter++;
            }
            else {
                auto iter2 = ++iter;
                while (iter2 != disassembly.end() && *iter == *iter2) {
                    ++iter2;
                }
                auto operandSize = iter2 - iter;
                auto operand = getOperand({iter, iter2});
                iter = iter2 + 1; // skip equal/hash
                switch (*iter) {
                    case 'a': {
                        result += "a";
                        if (operand != 0xf)
                            return "";
                        iter += 2;
                        break;
                    }
                    case 'n': {
                        // nzconst
                        iter += 8;
                        int size = 0;
                        auto [ptr, ec] = std::from_chars(&(*iter), &(*(iter + 2)), size);
                        result += fmt::format("{}", operand + 1);
                        iter += size>=10 ? 4 : 3;
                        break;
                    }
                    case 'c': {
                        // const(n)
                        iter += 6;
                        int size = 0;
                        auto [ptr, ec] = std::from_chars(&(*iter), &(*(iter + 2)), size);
                        result += fmt::format("#{:0{}x}", operand, size>>2);
                        iter += size>=10 ? 4 : 3;
                        break;
                    }
                    case 'd': {
                        // daregpair+n
                        if (*(iter + 9) == 'r')
                            return "";
                        iter += 10;
                        int offset = *(iter) - '0';
                        if (offset == 1) {
                            offset = 10;
                            ++iter;
                        }
                        if ((operand & 10) != offset) {
                            return "";
                        }
                        operand &= 5;
                        result += operandDaregpair[operand & 4 ? (operand & 1) + 2 : operand & 1];
                        iter += 2;
                        break;
                    }
                    case 'f': {
                        // field, field+8
                        if (operand >= 8 && *(iter+5) != '+') {
                            return "";
                        }
                        result += operandField[operand & 7];
                        iter += *(iter+5) != '+' ? 6 : 8;
                        break;
                    }
                    case 'm' : {
                        // mrpair+0, mrpair+8
                        if (operand >= 8 && *(iter+7) != '8') {
                            return "";
                        }
                        result += operandMrpair[operand & 7];
                        iter += 9;
                        break;
                    }
                    case 'p': {
                        // #pcofs(n)
                        auto distance = twosComplement(operand, operandSize*4);
                        if (distance == 0) {
                            return "";
                        }
                        result += fmt::format("#{:05x}", pc + distance - operandSize);
                        iter += 9;
                        break;
                    }
                    case 'r': {
                        // reg, regpair4, regpair8, regpair8split, regpair12
                        while (*iter != '+' && *iter != '>')
                            ++iter;
                        char type = *(iter - 1);
                        int offset = 0;
                        if (*iter == '>') {
                            ++iter;
                        }
                        else {
                            ++iter;
                            offset = *iter - '0';
                            if (offset == 1) {
                                offset = 12;
                                ++iter;
                            }
                            iter += 2;
                        }
                        switch (type) {
                            case 'g': {
                                if (static_cast<int>(operand) - offset < 0 || static_cast<int>(operand) - offset >= 4) {
                                    return "";
                                }
                                result += operandReg[operand - offset];
                                break;
                            }
                            case '4': {
                                if (static_cast<int>(operand) - offset < 0 || static_cast<int>(operand) - offset >= 4) {
                                    return "";
                                }
                                result += operandRegpair4[operand - offset];
                                break;
                            }
                            case '8': {
                                if (static_cast<int>(operand) - offset < 0 || static_cast<int>(operand) - offset >= 7) {
                                    return "";
                                }
                                result += operandRegpair8[operand - offset];
                                break;
                            }
                            case 't': {
                                if ((operand & ~4) != operand) {
                                    return "";
                                }
                                result += operandRegpair8split[operand & 8 ? (operand & 3) | 4 : operand];
                                break;
                            }
                            case '2': {
                                if (static_cast<int>(operand) - offset < 0 || static_cast<int>(operand) - offset >= 12) {
                                    return "";
                                }
                                result += operandRegpair12[operand - offset];
                                break;
                            }
                            default:
                                return "";
                        }
                        break;
                    }
                    case 't': {
                        // tempreg+0, tempreg+8
                        if (operand > 4 && *(iter+8) != '8') {
                            return "";
                        }
                        result += operandTempreg[operand & 7];
                        iter += 10;
                    }
                    default:
                        break;
                }
            }
        }
        return result;
    }
    size_t numberOfOperands{0};
    std::string hexOperands;
    std::array<std::pair<std::string_view, uint64_t>, 4> operands;
};


std::pair<std::string, std::string> HpSaturnBase::disassembleOpcode(uint32_t& address) const
{
//    if (address > 0x710fd)
//        std::cout << "hu" << std::endl;
    uint32_t startAddress = address;
    uint32_t opcode = readNibbles<1>(address);
    size_t length = 1;
    const OpcodeEntry* current = &root_table[opcode];
    while (current != nullptr) {
        if (current->mnemonic != nullptr) {
            std::string debugHelp;
            auto backtrackAddress = address;
            while (true) {
                Operands operands(*this, current->opcode, address);
                if (debugHelp.empty()) {
                    debugHelp += fmt::format("{:05x}: {:0{}x}{}", startAddress, opcode, length, operands.hexOperands);
                }
                debugHelp += fmt::format(" [{}]", current->mnemonic);
                auto disassemblyString = operands.formatOperands(current->mnemonic, address);
                if (!disassemblyString.empty()) {
                    return {fmt::format("{:0{}x}{}", opcode, length, operands.hexOperands), fmt::format("{}{}", disassemblyString, current->next ? "" : "")};
                }
                if (current->next == nullptr) {
                    std::cerr << debugHelp << std::endl;
                    return {fmt::format("{:0{}x}{}", opcode, length, operands.hexOperands), ""};
                }
                address = backtrackAddress;
                current = current->next;
            }
        }
        if (current->next == nullptr) {
            std::cerr << "Error: Invalid opcode" << std::endl;
            return {fmt::format("{:0{}x}", opcode, length), ""};
        }
        auto nibble = readNibbles<1>(address);
        ++length;
        opcode = (opcode << 4) | nibble;
        current = &current->next[nibble];
    }
    std::cerr << "Error: Invalid opcode" << std::endl;
    return {fmt::format("{:0{}x}", opcode, length), ""};
}
