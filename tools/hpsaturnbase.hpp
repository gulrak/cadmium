//---------------------------------------------------------------------------------------
// AUTOGENERATED BY gen_saturn_decode.py
//---------------------------------------------------------------------------------------
#pragma once

#include <array>
#include <cstdint>
#include <string>
#include <vector>
#include <iostream>

class HpSaturnBase
{
public:
    constexpr static uint32_t ADDRESS_SPACE = 0x100000;
    constexpr static uint32_t RAM_OFFSET = 0x70000;
    constexpr static uint32_t RAM_END = 0x80000;
    HpSaturnBase();
    ~HpSaturnBase() = default;
    void loadData(uint32_t address, const std::vector<uint8_t>& data)
    {
        std::copy(data.begin(), data.end(), _ram.begin() + address/2);
    }
    unsigned readNibble(const uint32_t address) const
    {
        //constexpr char hex[] = "0123456789abcdef";
        const auto nibble = address & 1 ? _ram[address>>1] >> 4 : _ram[address>>1] & 0xf;
        //std::cout << hex[nibble];
        return nibble;
    }
    uint64_t readNibbles(int n, uint32_t& address) const
    {
        uint64_t result = 0;
        for (uint32_t i = 0; i < n; ++i) {
            result |= readNibble(address++) << (i*4);
        }
        return result;
    }
    template <int N>
    uint64_t readNibbles(uint32_t& address) const
    {
        uint64_t result = 0;
        for (uint32_t i = 0; i < N; ++i) {
            result |= readNibble(address++) << (i*4);
        }
        return result;
    }
    template <int N>
    uint64_t readNibbles()
    {
        return readNibbles<N>(_rPC);
    }
    void handleOpcode();
    std::string readOperands(std::string_view opcodePattern, uint32_t& address, std::array<std::pair<std::string_view, uint64_t>, 4>& operands) const;
    std::pair<std::string,std::string> disassembleOpcode(uint32_t& address) const;
    void opAdd_16x();
    void opAdd_17x();
    void opAdd_809();
    void opAdd_818fxi();
    void opAdd_818txi();
    void opAdd_akx();
    void opAdd_cx();
    void opAnd_0exy();
    void opAnd_0exy_2();
    void opBrbc_8086xyy();
    void opBrbc_808axyy();
    void opBrbc_83zyy();
    void opBrbc_86xyy();
    void opBrbs_8087xyy();
    void opBrbs_808bxyy();
    void opBrbs_87xyy();
    void opBrcc_5xx();
    void opBrcs_4xx();
    void opBreq_89xyy();
    void opBreq_8auyy();
    void opBreq_9tuyy();
    void opBrge_8buyy_3();
    void opBrge_9tuyy_7();
    void opBrgt_8buyy();
    void opBrgt_9tuyy_5();
    void opBrle_8buyy_4();
    void opBrle_9tuyy_8();
    void opBrlt_8buyy_2();
    void opBrlt_9tuyy_6();
    void opBrne_88xyy();
    void opBrne_8auyy_2();
    void opBrne_9tuyy_2();
    void opBrnz_8auyy_4();
    void opBrnz_9tuyy_4();
    void opBrz_8auyy_3();
    void opBrz_9tuyy_3();
    void opBuscb_8083();
    void opBuscc_80b();
    void opBuscd_808d();
    void opCall_7xxx();
    void opCall_8exxxx();
    void opCall_8fxxxxx();
    void opClr_08();
    void opClr_apt();
    void opClr_dt();
    void opClrb_8084x();
    void opClrb_8088x();
    void opClrb_82x();
    void opClrb_84x();
    void opConfig_805();
    void opDec_0d();
    void opDec_0d_2();
    void opDec_aku();
    void opDec_akw();
    void opDec_cu();
    void opDec_cw();
    void opIn_802();
    void opIn_803();
    void opInc_0c();
    void opInc_bku();
    void opInc_eu();
    void opIntoff_808f();
    void opInton_8080();
    void opJump_6xxx();
    void opJump_808c();
    void opJump_808e();
    void opJump_81b2();
    void opJump_81b3();
    void opJump_8cxxxx();
    void opJump_8dxxxxx();
    void opMove_09();
    void opMove_0a();
    void opMove_10x();
    void opMove_10x_2();
    void opMove_11x();
    void opMove_11x_2();
    void opMove_13x();
    void opMove_13x_2();
    void opMove_14x();
    void opMove_14x_2();
    void opMove_15xi();
    void opMove_15xt();
    void opMove_19xx();
    void opMove_1axxxx();
    void opMove_1bxxxxx();
    void opMove_1dxx();
    void opMove_1exxxx();
    void opMove_1fxxxxx();
    void opMove_2x();
    void opMove_2x_2();
    void opMove_30x();
    void opMove_31xx();
    void opMove_32xxx();
    void opMove_33xxxx();
    void opMove_34xxxxx();
    void opMove_35xxxxxx();
    void opMove_36xxxxxxx();
    void opMove_37xxxxxxxx();
    void opMove_38xxxxxxxxx();
    void opMove_39xxxxxxxxxx();
    void opMove_3axxxxxxxxxxx();
    void opMove_3bxxxxxxxxxxxx();
    void opMove_3cxxxxxxxxxxxxx();
    void opMove_3dxxxxxxxxxxxxxx();
    void opMove_3exxxxxxxxxxxxxxx();
    void opMove_3fxxxxxxxxxxxxxxxx();
    void opMove_806();
    void opMove_80820x();
    void opMove_80821xx();
    void opMove_80822xxx();
    void opMove_80823xxxx();
    void opMove_80824xxxxx();
    void opMove_80825xxxxxx();
    void opMove_80826xxxxxxx();
    void opMove_80827xxxxxxxx();
    void opMove_80828xxxxxxxxx();
    void opMove_80829xxxxxxxxxx();
    void opMove_8082axxxxxxxxxxx();
    void opMove_8082bxxxxxxxxxxxx();
    void opMove_8082cxxxxxxxxxxxxx();
    void opMove_8082dxxxxxxxxxxxxxx();
    void opMove_8082exxxxxxxxxxxxxxx();
    void opMove_8082fxxxxxxxxxxxxxxxx();
    void opMove_808c_2();
    void opMove_808e_2();
    void opMove_80cx();
    void opMove_80dx();
    void opMove_81af0x();
    void opMove_81af0x_2();
    void opMove_81af1x();
    void opMove_81af1x_2();
    void opMove_81at0x();
    void opMove_81at0x_2();
    void opMove_81at1x();
    void opMove_81at1x_2();
    void opMove_81b2_2();
    void opMove_81b3_2();
    void opMove_81b4();
    void opMove_81b5();
    void opMove_apz();
    void opMove_dz();
    void opNeg_brv();
    void opNeg_fv();
    void opNop3_420();
    void opNop4_6300();
    void opNop5_64000();
    void opNot_brv_2();
    void opNot_fv_2();
    void opOr_0exy_3();
    void opOr_0exy_4();
    void opOut_800();
    void opOut_801();
    void opPop_07();
    void opPush_06();
    void opReset_80a();
    void opRet_01();
    void opRetbc_8086x00();
    void opRetbc_808ax00();
    void opRetbc_83z00();
    void opRetbc_86x00();
    void opRetbs_8087x00();
    void opRetbs_808bx00();
    void opRetbs_87x00();
    void opRetcc_500();
    void opRetclrc_03();
    void opRetcs_400();
    void opReteq_89x00();
    void opReteq_8au00();
    void opReteq_9tu00();
    void opRetge_8bu00_3();
    void opRetge_9tu00_7();
    void opRetgt_8bu00();
    void opRetgt_9tu00_5();
    void opReti_0f();
    void opRetle_8bu00_4();
    void opRetle_9tu00_8();
    void opRetlt_8bu00_2();
    void opRetlt_9tu00_6();
    void opRetne_88x00();
    void opRetne_8au00_2();
    void opRetne_9tu00_2();
    void opRetnz_8au00_4();
    void opRetnz_9tu00_4();
    void opRetsetc_02();
    void opRetsetxm_00();
    void opRetsxm_00_2();
    void opRetz_8au00_3();
    void opRetz_9tu00_3();
    void opRln_81x();
    void opRrn_81x_2();
    void opRsi_80810();
    void opSetb_8085x();
    void opSetb_8089x();
    void opSetb_85x();
    void opSetdec_05();
    void opSethex_04();
    void opShutdn_807();
    void opSln_brw();
    void opSln_fw();
    void opSrb_819rw();
    void opSrb_819rw_2();
    void opSrb_81w();
    void opSreq_80e();
    void opSrn_brw_2();
    void opSrn_fw_2();
    void opSub_18x();
    void opSub_1cx();
    void opSub_818txi_2();
    void opSub_818txi_3();
    void opSub_bty();
    void opSub_ey();
    void opSubn_bty_2();
    void opSubn_ey_2();
    void opSwap_0b();
    void opSwap_0b_2();
    void opSwap_12x();
    void opSwap_12x_2();
    void opSwap_12x_3();
    void opSwap_12x_4();
    void opSwap_13x_3();
    void opSwap_13x_4();
    void opSwap_13x_5();
    void opSwap_13x_6();
    void opSwap_80fx();
    void opSwap_80fx_2();
    void opSwap_81af2x();
    void opSwap_81af2x_2();
    void opSwap_81af2x_3();
    void opSwap_81af2x_4();
    void opSwap_81at2x();
    void opSwap_81at2x_2();
    void opSwap_81at2x_3();
    void opSwap_81b6();
    void opSwap_81b6_2();
    void opSwap_81b7();
    void opSwap_81b7_2();
    void opSwap_apz_2();
    void opSwap_apz_3();
    void opSwap_dz_2();
    void opSwap_dz_3();
    void opUncnfg_804();

protected:
    uint64_t _rA{};
    uint64_t _rB{};
    uint64_t _rC{};
    uint64_t _rD{};
    std::array<uint64_t, 5> _rR{};
    std::array<uint32_t, 8> _rRSTK{};
    uint16_t _rIN{};   // 10 bit
    uint16_t _rOUT{};  // 10 bit
    uint32_t _rPC{};
    uint32_t _rD0{};
    uint32_t _rD1{};
    uint16_t _rST{};
    uint8_t _rP{};
    uint8_t _rHS{};
    bool _rCarry{false};
    std::vector<uint8_t> _ram;
};
